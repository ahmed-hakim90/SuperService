{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a comprehensive service center management system built for Sokany, designed to handle maintenance requests, user management, warehouses, spare parts, and administrative functions. The application provides a complete workflow for managing service centers with role-based access control, inventory management, and activity tracking.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Styling**: Tailwind CSS with shadcn/ui component library\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack React Query for server state management\n- **Form Handling**: React Hook Form with Zod validation\n- **UI Components**: Radix UI primitives with custom styling\n- **Build Tool**: Vite for development and bundling\n- **Internationalization**: Arabic (RTL) language support with proper font handling\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL with Neon Database serverless hosting\n- **API Design**: RESTful API structure with centralized error handling\n- **File Structure**: Monorepo structure with shared schema between client and server\n- **Session Management**: Express sessions with PostgreSQL store\n- **Development**: Hot module replacement and runtime error overlay\n\n## Database Design\n- **Users**: Role-based system (admin, manager, technician, receptionist, warehouse_manager, customer)\n- **Service Centers**: Multi-location support with manager assignments\n- **Service Requests**: Complete workflow from creation to completion\n- **Inventory Management**: Warehouses, spare parts, and stock tracking\n- **Parts Transfer**: Inter-warehouse transfer system with approval workflow\n- **Activity Logging**: Comprehensive audit trail for all system actions\n- **Categories & Products**: Hierarchical organization of serviceable items\n\n## Authentication & Authorization\n- **Authentication**: Email/password based with status verification (active/inactive/pending)\n- **Authorization**: Role-based access control with center-specific permissions\n- **Session Management**: Persistent sessions with automatic cleanup\n- **User Registration**: Admin approval required for new accounts\n\n## Key Features\n- **Dashboard**: Real-time statistics and recent activity overview\n- **User Management**: CRUD operations with role assignment and approval workflow\n- **Service Request Management**: Complete lifecycle tracking with status updates\n- **Inventory System**: Multi-warehouse support with transfer capabilities\n- **Reporting**: Analytics and performance metrics\n- **Activity Logging**: Detailed audit trail for compliance and monitoring\n\n# External Dependencies\n\n## Database & ORM\n- **Neon Database**: Serverless PostgreSQL hosting (@neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database operations (drizzle-orm, drizzle-kit)\n- **Drizzle Zod**: Schema validation integration (drizzle-zod)\n\n## UI Framework & Components\n- **React**: Core framework (react, react-dom)\n- **Radix UI**: Headless component primitives (@radix-ui/*)\n- **shadcn/ui**: Pre-styled component library\n- **Tailwind CSS**: Utility-first styling framework\n- **Lucide React**: Icon library\n\n## Development & Build Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type safety and development experience\n- **ESBuild**: Fast JavaScript bundling for production\n- **PostCSS**: CSS processing with Autoprefixer\n\n## State Management & Data Fetching\n- **TanStack React Query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation\n\n## Fonts & Styling\n- **Google Fonts**: Poppins font family for Arabic/RTL support\n- **Bootstrap Icons**: Icon library for UI elements\n- **CSS Variables**: Theme customization and dark mode support\n\n## Session & Storage\n- **connect-pg-simple**: PostgreSQL session store\n- **express-session**: Session management middleware\n\n## Utilities\n- **date-fns**: Date manipulation and formatting\n- **clsx & tailwind-merge**: Conditional CSS class handling\n- **class-variance-authority**: Component variant management\n- **nanoid**: Unique ID generation","size_bytes":4303},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session middleware\napp.use(session({\n  secret: 'sokany-service-center-secret',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { \n    secure: false, // Set to true in production with HTTPS\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2358},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { \n  insertUserSchema, \n  insertServiceCenterSchema,\n  insertCustomerSchema,\n  insertCategorySchema,\n  insertProductSchema,\n  insertServiceRequestSchema,\n  insertServiceRequestFollowUpSchema,\n  insertWarehouseSchema,\n  insertSparePartSchema,\n  insertInventorySchema,\n  insertProductInventorySchema,\n  insertPartsTransferSchema,\n  insertActivityLogSchema,\n  type User\n} from \"@shared/schema\";\n\n// Helper function to get current user from session\nasync function getCurrentUser(req: any): Promise<User | null> {\n  if (!req.session?.user?.id) {\n    return null;\n  }\n  return await storage.getUser(req.session.user.id) || null;\n}\n\n// Helper function to check if user can access data based on role and center\nfunction canAccessData(user: User, resourceType: string, data?: any): boolean {\n  if (user.role === 'admin') {\n    return true; // Admin can access everything\n  }\n  \n  // Manager can only access their center's data\n  if (user.role === 'manager') {\n    if (resourceType === 'user' && data?.centerId && data.centerId !== user.centerId) {\n      return false;\n    }\n    if (resourceType === 'serviceRequest' && data?.centerId && data.centerId !== user.centerId) {\n      return false;\n    }\n    if (resourceType === 'warehouse' && data?.centerId && data.centerId !== user.centerId) {\n      return false;\n    }\n    if (resourceType === 'customer' && data?.centerId && data.centerId !== user.centerId) {\n      return false;\n    }\n  }\n  \n  // Technician can only access their assigned service requests\n  if (user.role === 'technician') {\n    if (resourceType === 'serviceRequest' && data?.technicianId && data.technicianId !== user.id) {\n      return false;\n    }\n  }\n  \n  // Warehouse manager can only access their warehouse data\n  if (user.role === 'warehouse_manager') {\n    if (resourceType === 'warehouse' && data?.managerId && data.managerId !== user.id) {\n      return false;\n    }\n  }\n  \n  // Customer can only access their own data\n  if (user.role === 'customer') {\n    if (resourceType === 'serviceRequest' && data?.customerId && data.customerId !== user.id) {\n      return false;\n    }\n  }\n  \n  return true;\n}\n\n// Helper function to filter data based on user role\nfunction filterDataForUser(user: User, resourceType: string, data: any[]): any[] {\n  if (user.role === 'admin') {\n    return data; // Admin sees everything\n  }\n  \n  return data.filter(item => canAccessData(user, resourceType, item));\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"البريد الإلكتروني وكلمة المرور مطلوبان\" });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"بيانات الدخول غير صحيحة\" });\n      }\n\n      // In a real app, you would verify the password hash here\n      // For demo purposes, we'll accept any password for existing users\n      if (user.status !== 'active') {\n        return res.status(401).json({ message: \"الحساب غير مفعل، يرجى انتظار موافقة المسؤول\" });\n      }\n\n      // Store user in session\n      (req as any).session.user = user;\n\n      // Log activity\n      await storage.logActivity({\n        userId: user.id,\n        action: \"login\",\n        entityType: \"user\",\n        entityId: user.id,\n        description: `تم تسجيل الدخول للمستخدم ${user.fullName}`\n      });\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"خطأ في الخادم\" });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"المستخدم موجود بالفعل\" });\n      }\n\n      // Create user with pending status\n      const user = await storage.createUser({\n        ...userData,\n        status: 'pending'\n      });\n\n      // Log activity\n      await storage.logActivity({\n        userId: user.id,\n        action: \"register\",\n        entityType: \"user\",\n        entityId: user.id,\n        description: `تم تسجيل مستخدم جديد: ${user.fullName}`\n      });\n\n      res.status(201).json({ message: \"تم إنشاء الحساب بنجاح، في انتظار الموافقة\" });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في الخادم\" });\n    }\n  });\n\n  // Users CRUD\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      const allUsers = await storage.getAllUsers();\n      let filteredUsers = allUsers;\n\n      // Filter users based on role\n      if (currentUser.role === 'manager') {\n        // Manager can only see users in their center\n        filteredUsers = allUsers.filter(user => user.centerId === currentUser.centerId);\n      } else if (currentUser.role !== 'admin') {\n        // Non-admin and non-manager roles cannot view other users\n        return res.status(403).json({ message: \"ليس لديك صلاحية لعرض المستخدمين\" });\n      }\n\n      res.json(filteredUsers);\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات المستخدمين\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"المستخدم غير موجود\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات المستخدم\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"المستخدم موجود بالفعل\" });\n      }\n\n      const user = await storage.createUser(userData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: user.id,\n        action: \"create\",\n        entityType: \"user\",\n        entityId: user.id,\n        description: `تم إضافة مستخدم جديد: ${user.fullName}`\n      });\n\n      res.status(201).json(user);\n    } catch (error) {\n      console.error(\"Create user error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في إضافة المستخدم\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.partial().parse(req.body);\n      const user = await storage.updateUser(req.params.id, userData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: user.id,\n        action: \"update\",\n        entityType: \"user\",\n        entityId: user.id,\n        description: `تم تحديث بيانات المستخدم: ${user.fullName}`\n      });\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Update user error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في تحديث المستخدم\" });\n    }\n  });\n\n  app.delete(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"المستخدم غير موجود\" });\n      }\n\n      await storage.deleteUser(req.params.id);\n\n      // Log activity\n      await storage.logActivity({\n        userId: req.params.id,\n        action: \"delete\",\n        entityType: \"user\",\n        entityId: req.params.id,\n        description: `تم حذف المستخدم: ${user.fullName}`\n      });\n\n      res.json({ message: \"تم حذف المستخدم بنجاح\" });\n    } catch (error) {\n      console.error(\"Delete user error:\", error);\n      res.status(500).json({ message: \"خطأ في حذف المستخدم\" });\n    }\n  });\n\n  // Service Centers CRUD\n  app.get(\"/api/service-centers\", async (req, res) => {\n    try {\n      const centers = await storage.getAllServiceCenters();\n      res.json(centers);\n    } catch (error) {\n      console.error(\"Get service centers error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات مراكز الخدمة\" });\n    }\n  });\n\n  app.get(\"/api/service-centers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const centers = await storage.getAllServiceCenters();\n      const center = centers.find(c => c.id === id);\n      \n      if (!center) {\n        return res.status(404).json({ message: \"المركز غير موجود\" });\n      }\n      \n      res.json(center);\n    } catch (error) {\n      console.error(\"Get service center error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات المركز\" });\n    }\n  });\n\n  app.post(\"/api/service-centers\", async (req, res) => {\n    try {\n      const centerData = insertServiceCenterSchema.parse(req.body);\n      const center = await storage.createServiceCenter(centerData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: center.managerId || '',\n        action: \"create\",\n        entityType: \"service_center\",\n        entityId: center.id,\n        description: `تم إضافة مركز خدمة جديد: ${center.name}`\n      });\n\n      res.status(201).json(center);\n    } catch (error) {\n      console.error(\"Create service center error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في إضافة مركز الخدمة\" });\n    }\n  });\n\n  app.put(\"/api/service-centers/:id\", async (req, res) => {\n    try {\n      const centerData = insertServiceCenterSchema.partial().parse(req.body);\n      const center = await storage.updateServiceCenter(req.params.id, centerData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: center.managerId || '',\n        action: \"update\",\n        entityType: \"service_center\",\n        entityId: center.id,\n        description: `تم تحديث مركز الخدمة: ${center.name}`\n      });\n\n      res.json(center);\n    } catch (error) {\n      console.error(\"Update service center error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في تحديث مركز الخدمة\" });\n    }\n  });\n\n  app.delete(\"/api/service-centers/:id\", async (req, res) => {\n    try {\n      const center = await storage.getServiceCenter(req.params.id);\n      if (!center) {\n        return res.status(404).json({ message: \"مركز الخدمة غير موجود\" });\n      }\n\n      await storage.deleteServiceCenter(req.params.id);\n\n      // Log activity\n      await storage.logActivity({\n        userId: center.managerId || '',\n        action: \"delete\",\n        entityType: \"service_center\",\n        entityId: req.params.id,\n        description: `تم حذف مركز الخدمة: ${center.name}`\n      });\n\n      res.json({ message: \"تم حذف مركز الخدمة بنجاح\" });\n    } catch (error) {\n      console.error(\"Delete service center error:\", error);\n      res.status(500).json({ message: \"خطأ في حذف مركز الخدمة\" });\n    }\n  });\n\n  // Customers CRUD\n  app.get(\"/api/customers\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      const allCustomers = await storage.getAllCustomers();\n      let filteredCustomers = allCustomers;\n\n      // Filter customers based on role\n      if (currentUser.role === 'manager' || currentUser.role === 'receptionist') {\n        // Manager and receptionist can see customers from their center only\n        filteredCustomers = allCustomers.filter(customer => customer.centerId === currentUser.centerId);\n      } else if (currentUser.role === 'technician') {\n        // Technician can see customers from their center only\n        filteredCustomers = allCustomers.filter(customer => customer.centerId === currentUser.centerId);\n      } else if (currentUser.role === 'customer') {\n        // Customer can only see their own data\n        filteredCustomers = allCustomers.filter(customer => customer.id === currentUser.id);\n      } else if (currentUser.role === 'warehouse_manager') {\n        // Warehouse manager doesn't need customer access\n        return res.status(403).json({ message: \"ليس لديك صلاحية لعرض العملاء\" });\n      }\n\n      res.json(filteredCustomers);\n    } catch (error) {\n      console.error(\"Get customers error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات العملاء\" });\n    }\n  });\n\n  app.post(\"/api/customers\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Check permissions\n      if (currentUser.role === 'customer' || currentUser.role === 'warehouse_manager') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لإضافة عملاء\" });\n      }\n\n      const customerData = insertCustomerSchema.parse(req.body);\n      \n      // Auto-assign centerId based on user's center\n      if (currentUser.centerId) {\n        customerData.centerId = currentUser.centerId;\n      }\n      \n      const customer = await storage.createCustomer(customerData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"create\",\n        entityType: \"customer\",\n        entityId: customer.id,\n        description: `تم إضافة عميل جديد: ${customer.fullName}`\n      });\n\n      res.status(201).json(customer);\n    } catch (error) {\n      console.error(\"Create customer error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في إضافة العميل\" });\n    }\n  });\n\n  app.put(\"/api/customers/:id\", async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.partial().parse(req.body);\n      const customer = await storage.updateCustomer(req.params.id, customerData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: '',\n        action: \"update\",\n        entityType: \"customer\",\n        entityId: customer.id,\n        description: `تم تحديث بيانات العميل: ${customer.fullName}`\n      });\n\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Update customer error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في تحديث العميل\" });\n    }\n  });\n\n  app.delete(\"/api/customers/:id\", async (req, res) => {\n    try {\n      const customer = await storage.getCustomer(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ message: \"العميل غير موجود\" });\n      }\n\n      await storage.deleteCustomer(req.params.id);\n\n      // Log activity\n      await storage.logActivity({\n        userId: '',\n        action: \"delete\",\n        entityType: \"customer\",\n        entityId: req.params.id,\n        description: `تم حذف العميل: ${customer.fullName}`\n      });\n\n      res.json({ message: \"تم حذف العميل بنجاح\" });\n    } catch (error) {\n      console.error(\"Delete customer error:\", error);\n      res.status(500).json({ message: \"خطأ في حذف العميل\" });\n    }\n  });\n\n  // Service Request Follow-ups\n  app.get(\"/api/service-requests/:id/follow-ups\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Check if user can access this service request\n      const serviceRequest = await storage.getServiceRequest(req.params.id);\n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"طلب الصيانة غير موجود\" });\n      }\n\n      // Check permissions\n      if (!canAccessData(currentUser, 'serviceRequest', serviceRequest)) {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لعرض متابعات هذا الطلب\" });\n      }\n\n      const followUps = await storage.getServiceRequestFollowUps(req.params.id);\n      res.json(followUps);\n    } catch (error) {\n      console.error(\"Get follow-ups error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب المتابعات\" });\n    }\n  });\n\n  app.post(\"/api/service-requests/:id/follow-ups\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Check if user can add follow-ups (only technicians)\n      if (currentUser.role !== 'technician') {\n        return res.status(403).json({ message: \"فقط الفنيين يمكنهم إضافة متابعات\" });\n      }\n\n      // Check if this service request exists and is assigned to the technician\n      const serviceRequest = await storage.getServiceRequest(req.params.id);\n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"طلب الصيانة غير موجود\" });\n      }\n\n      if (serviceRequest.technicianId !== currentUser.id) {\n        return res.status(403).json({ message: \"يمكنك إضافة متابعات فقط للطلبات المسندة إليك\" });\n      }\n\n      const followUpData = insertServiceRequestFollowUpSchema.parse({\n        serviceRequestId: req.params.id,\n        technicianId: currentUser.id,\n        followUpText: req.body.followUpText,\n        newStatus: req.body.newStatus\n      });\n\n      const followUp = await storage.createServiceRequestFollowUp(followUpData);\n\n      // Update service request status if newStatus was provided\n      if (followUpData.newStatus) {\n        const updateData = {\n          status: followUpData.newStatus,\n          updatedAt: new Date(),\n          ...(followUpData.newStatus === 'completed' ? { completedAt: new Date() } : {})\n        };\n        await storage.updateServiceRequest(req.params.id, updateData);\n\n        // Log status change activity\n        const statusText = followUpData.newStatus === 'completed' ? 'مكتمل' : \n                          followUpData.newStatus === 'in_progress' ? 'قيد التقدم' : \n                          followUpData.newStatus === 'pending' ? 'في الانتظار' : 'ملغي';\n        await storage.logActivity({\n          userId: currentUser.id,\n          action: \"update\",\n          entityType: \"service_request\",\n          entityId: req.params.id,\n          description: `تم تحديث حالة طلب الصيانة ${serviceRequest.requestNumber} إلى ${statusText}`\n        });\n      }\n\n      // Log follow-up activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"create\",\n        entityType: \"service_request_follow_up\",\n        entityId: followUp.id,\n        description: `تم إضافة متابعة لطلب الصيانة: ${serviceRequest.requestNumber}`\n      });\n\n      res.status(201).json(followUp);\n    } catch (error) {\n      console.error(\"Create follow-up error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في إضافة المتابعة\" });\n    }\n  });\n\n  // Warehouses CRUD\n  app.get(\"/api/warehouses\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      const allWarehouses = await storage.getAllWarehouses();\n      let filteredWarehouses = allWarehouses;\n\n      // Filter warehouses based on role\n      if (currentUser.role === 'manager') {\n        // Manager can only see warehouses in their center\n        filteredWarehouses = allWarehouses.filter(warehouse => warehouse.centerId === currentUser.centerId);\n      } else if (currentUser.role === 'warehouse_manager') {\n        // Warehouse manager can only see warehouses they manage\n        filteredWarehouses = allWarehouses.filter(warehouse => warehouse.managerId === currentUser.id);\n      } else if (currentUser.role !== 'admin') {\n        // Other roles cannot access warehouses\n        return res.status(403).json({ message: \"ليس لديك صلاحية لعرض المخازن\" });\n      }\n\n      res.json(filteredWarehouses);\n    } catch (error) {\n      console.error(\"Get warehouses error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات المخازن\" });\n    }\n  });\n\n  app.post(\"/api/warehouses\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Check permissions - only admin can create warehouses\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لإضافة مخازن\" });\n      }\n\n      const warehouseData = insertWarehouseSchema.parse(req.body);\n      const warehouse = await storage.createWarehouse(warehouseData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"create\",\n        entityType: \"warehouse\",\n        entityId: warehouse.id,\n        description: `تم إضافة مخزن جديد: ${warehouse.name}`\n      });\n\n      res.status(201).json(warehouse);\n    } catch (error) {\n      console.error(\"Create warehouse error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في إضافة المخزن\" });\n    }\n  });\n\n  app.put(\"/api/warehouses/:id\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      const warehouse = await storage.getWarehouse(req.params.id);\n      if (!warehouse) {\n        return res.status(404).json({ message: \"المخزن غير موجود\" });\n      }\n\n      // Check permissions\n      if (currentUser.role === 'manager' && warehouse.centerId !== currentUser.centerId) {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لتعديل هذا المخزن\" });\n      }\n      if (currentUser.role === 'warehouse_manager' && warehouse.managerId !== currentUser.id) {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لتعديل هذا المخزن\" });\n      }\n      if (currentUser.role !== 'admin' && currentUser.role !== 'manager' && currentUser.role !== 'warehouse_manager') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لتعديل المخازن\" });\n      }\n\n      const warehouseData = insertWarehouseSchema.partial().parse(req.body);\n      const updatedWarehouse = await storage.updateWarehouse(req.params.id, warehouseData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"update\",\n        entityType: \"warehouse\",\n        entityId: updatedWarehouse.id,\n        description: `تم تحديث المخزن: ${updatedWarehouse.name}`\n      });\n\n      res.json(updatedWarehouse);\n    } catch (error) {\n      console.error(\"Update warehouse error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في تحديث المخزن\" });\n    }\n  });\n\n  app.delete(\"/api/warehouses/:id\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      const warehouse = await storage.getWarehouse(req.params.id);\n      if (!warehouse) {\n        return res.status(404).json({ message: \"المخزن غير موجود\" });\n      }\n\n      // Check permissions - only admin can delete warehouses\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لحذف المخازن\" });\n      }\n\n      await storage.deleteWarehouse(req.params.id);\n\n      // Log activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"delete\",\n        entityType: \"warehouse\",\n        entityId: req.params.id,\n        description: `تم حذف المخزن: ${warehouse.name}`\n      });\n\n      res.json({ message: \"تم حذف المخزن بنجاح\" });\n    } catch (error) {\n      console.error(\"Delete warehouse error:\", error);\n      res.status(500).json({ message: \"خطأ في حذف المخزن\" });\n    }\n  });\n\n  // Categories CRUD\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Get categories error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات الفئات\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: '',\n        action: \"create\",\n        entityType: \"category\",\n        entityId: category.id,\n        description: `تم إضافة فئة جديدة: ${category.name}`\n      });\n\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Create category error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في إضافة الفئة\" });\n    }\n  });\n\n  app.put(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.partial().parse(req.body);\n      const category = await storage.updateCategory(req.params.id, categoryData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: '',\n        action: \"update\",\n        entityType: \"category\",\n        entityId: category.id,\n        description: `تم تحديث الفئة: ${category.name}`\n      });\n\n      res.json(category);\n    } catch (error) {\n      console.error(\"Update category error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في تحديث الفئة\" });\n    }\n  });\n\n  app.delete(\"/api/categories/:id\", async (req, res) => {\n    try {\n      const category = await storage.getCategory(req.params.id);\n      if (!category) {\n        return res.status(404).json({ message: \"الفئة غير موجودة\" });\n      }\n\n      await storage.deleteCategory(req.params.id);\n\n      // Log activity\n      await storage.logActivity({\n        userId: '',\n        action: \"delete\",\n        entityType: \"category\",\n        entityId: req.params.id,\n        description: `تم حذف الفئة: ${category.name}`\n      });\n\n      res.json({ message: \"تم حذف الفئة بنجاح\" });\n    } catch (error) {\n      console.error(\"Delete category error:\", error);\n      res.status(500).json({ message: \"خطأ في حذف الفئة\" });\n    }\n  });\n\n  // Products CRUD\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Get products error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات المنتجات\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: '',\n        action: \"create\",\n        entityType: \"product\",\n        entityId: product.id,\n        description: `تم إضافة منتج جديد: ${product.name}`\n      });\n\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Create product error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في إضافة المنتج\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: '',\n        action: \"update\",\n        entityType: \"product\",\n        entityId: product.id,\n        description: `تم تحديث المنتج: ${product.name}`\n      });\n\n      res.json(product);\n    } catch (error) {\n      console.error(\"Update product error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في تحديث المنتج\" });\n    }\n  });\n\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ message: \"المنتج غير موجود\" });\n      }\n\n      await storage.deleteProduct(req.params.id);\n\n      // Log activity\n      await storage.logActivity({\n        userId: '',\n        action: \"delete\",\n        entityType: \"product\",\n        entityId: req.params.id,\n        description: `تم حذف المنتج: ${product.name}`\n      });\n\n      res.json({ message: \"تم حذف المنتج بنجاح\" });\n    } catch (error) {\n      console.error(\"Delete product error:\", error);\n      res.status(500).json({ message: \"خطأ في حذف المنتج\" });\n    }\n  });\n\n  // Product Inventory CRUD\n  app.get(\"/api/product-inventory/:warehouseId\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Check permissions\n      if (currentUser.role === 'customer') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لعرض المخزون\" });\n      }\n\n      // Get warehouse to check permissions\n      const warehouse = await storage.getWarehouse(req.params.warehouseId);\n      if (!warehouse) {\n        return res.status(404).json({ message: \"المخزن غير موجود\" });\n      }\n\n      // Check if user can access this warehouse\n      if (currentUser.role === 'manager' && warehouse.centerId !== currentUser.centerId) {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لعرض مخزون هذا المخزن\" });\n      }\n      if (currentUser.role === 'warehouse_manager' && warehouse.managerId !== currentUser.id) {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لعرض مخزون هذا المخزن\" });\n      }\n\n      const inventory = await storage.getProductInventory(req.params.warehouseId);\n      res.json(inventory);\n    } catch (error) {\n      console.error(\"Get product inventory error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات المخزون\" });\n    }\n  });\n\n  app.post(\"/api/product-inventory\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Check permissions\n      if (currentUser.role !== 'admin' && currentUser.role !== 'manager' && currentUser.role !== 'warehouse_manager') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لإضافة مخزون\" });\n      }\n\n      const inventoryData = insertProductInventorySchema.parse(req.body);\n      \n      // Get warehouse to check permissions\n      const warehouse = await storage.getWarehouse(inventoryData.warehouseId);\n      if (!warehouse) {\n        return res.status(404).json({ message: \"المخزن غير موجود\" });\n      }\n\n      // Check if user can add to this warehouse\n      if (currentUser.role === 'manager' && warehouse.centerId !== currentUser.centerId) {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لإضافة مخزون لهذا المخزن\" });\n      }\n      if (currentUser.role === 'warehouse_manager' && warehouse.managerId !== currentUser.id) {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لإضافة مخزون لهذا المخزن\" });\n      }\n\n      const inventory = await storage.createProductInventory(inventoryData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"create\",\n        entityType: \"product_inventory\",\n        entityId: inventory.id,\n        description: `تم إضافة مخزون جديد للمنتج في المخزن`\n      });\n\n      res.status(201).json(inventory);\n    } catch (error) {\n      console.error(\"Create product inventory error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في إضافة المخزون\" });\n    }\n  });\n\n  app.put(\"/api/product-inventory/:id\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Check permissions\n      if (currentUser.role !== 'admin' && currentUser.role !== 'manager' && currentUser.role !== 'warehouse_manager') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لتحديث المخزون\" });\n      }\n\n      const inventoryData = insertProductInventorySchema.partial().parse(req.body);\n      const inventory = await storage.updateProductInventory(req.params.id, inventoryData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"update\",\n        entityType: \"product_inventory\",\n        entityId: inventory.id,\n        description: `تم تحديث المخزون`\n      });\n\n      res.json(inventory);\n    } catch (error) {\n      console.error(\"Update product inventory error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في تحديث المخزون\" });\n    }\n  });\n\n  app.delete(\"/api/product-inventory/:id\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Check permissions - only admin can delete inventory\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لحذف المخزون\" });\n      }\n\n      await storage.deleteProductInventory(req.params.id);\n\n      // Log activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"delete\",\n        entityType: \"product_inventory\",\n        entityId: req.params.id,\n        description: `تم حذف المخزون`\n      });\n\n      res.json({ message: \"تم حذف المخزون بنجاح\" });\n    } catch (error) {\n      console.error(\"Delete product inventory error:\", error);\n      res.status(500).json({ message: \"خطأ في حذف المخزون\" });\n    }\n  });\n\n  // Service Requests CRUD\n  app.get(\"/api/service-requests\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      const allRequests = await storage.getAllServiceRequests();\n      let filteredRequests = allRequests;\n\n      // Filter service requests based on role\n      if (currentUser.role === 'manager') {\n        // Manager can only see requests from their center\n        filteredRequests = allRequests.filter(req => req.centerId === currentUser.centerId);\n      } else if (currentUser.role === 'technician') {\n        // Technician can only see requests assigned to them\n        filteredRequests = allRequests.filter(req => req.technicianId === currentUser.id);\n      } else if (currentUser.role === 'receptionist') {\n        // Receptionist can see requests from their center\n        filteredRequests = allRequests.filter(req => req.centerId === currentUser.centerId);\n      } else if (currentUser.role === 'customer') {\n        // Customer can only see their own requests\n        filteredRequests = allRequests.filter(req => req.customerId === currentUser.id);\n      } else if (currentUser.role === 'warehouse_manager') {\n        // Warehouse manager cannot see service requests\n        return res.status(403).json({ message: \"ليس لديك صلاحية لعرض طلبات الصيانة\" });\n      }\n\n      res.json(filteredRequests);\n    } catch (error) {\n      console.error(\"Get service requests error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب بيانات طلبات الصيانة\" });\n    }\n  });\n\n  app.post(\"/api/service-requests\", async (req, res) => {\n    try {\n      const requestData = insertServiceRequestSchema.parse(req.body);\n      const serviceRequest = await storage.createServiceRequest(requestData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: serviceRequest.technicianId || '',\n        action: \"create\",\n        entityType: \"service_request\",\n        entityId: serviceRequest.id,\n        description: `تم إضافة طلب صيانة جديد: ${serviceRequest.requestNumber}`\n      });\n\n      res.status(201).json(serviceRequest);\n    } catch (error) {\n      console.error(\"Create service request error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في إضافة طلب الصيانة\" });\n    }\n  });\n\n  app.put(\"/api/service-requests/:id\", async (req, res) => {\n    try {\n      const requestData = insertServiceRequestSchema.partial().parse(req.body);\n      const serviceRequest = await storage.updateServiceRequest(req.params.id, requestData);\n\n      // Log activity\n      await storage.logActivity({\n        userId: serviceRequest.technicianId || '',\n        action: \"update\",\n        entityType: \"service_request\",\n        entityId: serviceRequest.id,\n        description: `تم تحديث طلب الصيانة: ${serviceRequest.requestNumber}`\n      });\n\n      res.json(serviceRequest);\n    } catch (error) {\n      console.error(\"Update service request error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"بيانات غير صحيحة\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"خطأ في تحديث طلب الصيانة\" });\n    }\n  });\n\n  app.delete(\"/api/service-requests/:id\", async (req, res) => {\n    try {\n      const serviceRequest = await storage.getServiceRequest(req.params.id);\n      if (!serviceRequest) {\n        return res.status(404).json({ message: \"طلب الصيانة غير موجود\" });\n      }\n\n      await storage.deleteServiceRequest(req.params.id);\n\n      // Log activity\n      await storage.logActivity({\n        userId: serviceRequest.technicianId || '',\n        action: \"delete\",\n        entityType: \"service_request\",\n        entityId: req.params.id,\n        description: `تم حذف طلب الصيانة: ${serviceRequest.requestNumber}`\n      });\n\n      res.json({ message: \"تم حذف طلب الصيانة بنجاح\" });\n    } catch (error) {\n      console.error(\"Delete service request error:\", error);\n      res.status(500).json({ message: \"خطأ في حذف طلب الصيانة\" });\n    }\n  });\n\n  // Dashboard endpoints\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      const stats = await storage.getDashboardStats();\n      \n      // Filter stats based on user role\n      if (currentUser.role === 'technician') {\n        // For technicians, show only their assigned requests stats\n        const allRequests = await storage.getAllServiceRequests();\n        const technicianRequests = allRequests.filter(req => req.technicianId === currentUser.id);\n        \n        const filteredStats = {\n          totalRequests: technicianRequests.length,\n          pendingRequests: technicianRequests.filter(req => req.status === 'pending').length,\n          inProgressRequests: technicianRequests.filter(req => req.status === 'in_progress').length,\n          completedRequests: technicianRequests.filter(req => req.status === 'completed').length,\n          totalRevenue: technicianRequests\n            .filter(req => req.status === 'completed')\n            .reduce((sum, req) => sum + (req.actualCost || req.estimatedCost || 0), 0)\n        };\n        \n        res.json(filteredStats);\n      } else if (currentUser.role === 'manager') {\n        const allRequests = await storage.getAllServiceRequests();\n        const allUsers = await storage.getAllUsers();\n        const allCustomers = await storage.getAllCustomers();\n        \n        const centerRequests = allRequests.filter(req => req.centerId === currentUser.centerId);\n        const centerUsers = allUsers.filter(user => user.centerId === currentUser.centerId);\n        \n        const filteredStats = {\n          totalUsers: centerUsers.length,\n          serviceRequests: centerRequests.length,\n          serviceCenters: 1, // Manager only sees their own center\n          revenue: centerRequests.reduce((sum, req) => sum + (req.estimatedCost || 0), 0)\n        };\n        \n        res.json(filteredStats);\n      } else {\n        res.json(stats);\n      }\n    } catch (error) {\n      console.error(\"Get dashboard stats error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب إحصائيات لوحة التحكم\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-requests\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      const recentRequests = await storage.getRecentServiceRequests();\n      \n      // Filter recent requests based on user role\n      let filteredRequests = recentRequests;\n      if (currentUser.role === 'manager') {\n        filteredRequests = recentRequests.filter(req => req.centerId === currentUser.centerId);\n      } else if (currentUser.role === 'technician') {\n        filteredRequests = recentRequests.filter(req => req.technicianId === currentUser.id);\n      } else if (currentUser.role === 'receptionist') {\n        filteredRequests = recentRequests.filter(req => req.centerId === currentUser.centerId);\n      } else if (currentUser.role === 'customer') {\n        filteredRequests = recentRequests.filter(req => req.customerId === currentUser.id);\n      }\n      \n      res.json(filteredRequests);\n    } catch (error) {\n      console.error(\"Get recent requests error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب أحدث طلبات الصيانة\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-activities\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      const recentActivities = await storage.getRecentActivities();\n      \n      // Filter activities based on user role\n      let filteredActivities = recentActivities;\n      if (currentUser.role === 'manager') {\n        // For managers, show activities related to their center\n        const allUsers = await storage.getAllUsers();\n        const centerUserIds = allUsers\n          .filter(user => user.centerId === currentUser.centerId)\n          .map(user => user.id);\n        \n        filteredActivities = recentActivities.filter(activity => \n          centerUserIds.includes(activity.userId)\n        );\n      } else if (currentUser.role === 'technician') {\n        // Technicians see only their own activities\n        filteredActivities = recentActivities.filter(activity => \n          activity.userId === currentUser.id\n        );\n      } else if (currentUser.role === 'receptionist') {\n        // Receptionists see activities from their center\n        const allUsers = await storage.getAllUsers();\n        const centerUserIds = allUsers\n          .filter(user => user.centerId === currentUser.centerId)\n          .map(user => user.id);\n        \n        filteredActivities = recentActivities.filter(activity => \n          centerUserIds.includes(activity.userId)\n        );\n      }\n      \n      res.json(filteredActivities);\n    } catch (error) {\n      console.error(\"Get recent activities error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب أحدث الأنشطة\" });\n    }\n  });\n\n  // Activity logs\n  app.get(\"/api/activities\", async (req, res) => {\n    try {\n      const activities = await storage.getRecentActivities();\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Get activities error:\", error);\n      res.status(500).json({ message: \"خطأ في جلب سجل الأنشطة\" });\n    }\n  });\n\n  // Data Export/Import endpoints\n  app.get(\"/api/export\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Only admin can export all data\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لتصدير البيانات\" });\n      }\n\n      // Get all data\n      const data = {\n        users: await storage.getAllUsers(),\n        serviceCenters: await storage.getAllServiceCenters(),\n        customers: await storage.getAllCustomers(),\n        categories: await storage.getAllCategories(),\n        products: await storage.getAllProducts(),\n        warehouses: await storage.getAllWarehouses(),\n        serviceRequests: await storage.getAllServiceRequests(),\n        exportDate: new Date().toISOString(),\n        exportedBy: currentUser.fullName\n      };\n\n      // Log activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"export\",\n        entityType: \"system_data\",\n        entityId: null,\n        description: `تم تصدير البيانات بواسطة ${currentUser.fullName}`\n      });\n\n      // Set headers for file download\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"sokany-backup-${new Date().toISOString().split('T')[0]}.json\"`);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Export data error:\", error);\n      res.status(500).json({ message: \"خطأ في تصدير البيانات\" });\n    }\n  });\n\n  app.post(\"/api/import\", async (req, res) => {\n    try {\n      const currentUser = await getCurrentUser(req);\n      if (!currentUser) {\n        return res.status(401).json({ message: \"يجب تسجيل الدخول أولاً\" });\n      }\n\n      // Only admin can import data\n      if (currentUser.role !== 'admin') {\n        return res.status(403).json({ message: \"ليس لديك صلاحية لاستيراد البيانات\" });\n      }\n\n      const importData = req.body;\n      \n      if (!importData || typeof importData !== 'object') {\n        return res.status(400).json({ message: \"بيانات الاستيراد غير صحيحة\" });\n      }\n\n      let importedCount = {\n        users: 0,\n        serviceCenters: 0,\n        customers: 0,\n        categories: 0,\n        products: 0,\n        warehouses: 0,\n        serviceRequests: 0\n      };\n\n      // Import service centers first (as they are referenced by other entities)\n      if (importData.serviceCenters && Array.isArray(importData.serviceCenters)) {\n        for (const center of importData.serviceCenters) {\n          try {\n            await storage.createServiceCenter(center);\n            importedCount.serviceCenters++;\n          } catch (e) {\n            console.error(\"Failed to import center:\", e);\n          }\n        }\n      }\n\n      // Import users\n      if (importData.users && Array.isArray(importData.users)) {\n        for (const user of importData.users) {\n          try {\n            // Skip if user already exists\n            const existing = await storage.getUserByEmail(user.email);\n            if (!existing) {\n              await storage.createUser(user);\n              importedCount.users++;\n            }\n          } catch (e) {\n            console.error(\"Failed to import user:\", e);\n          }\n        }\n      }\n\n      // Import customers\n      if (importData.customers && Array.isArray(importData.customers)) {\n        for (const customer of importData.customers) {\n          try {\n            await storage.createCustomer(customer);\n            importedCount.customers++;\n          } catch (e) {\n            console.error(\"Failed to import customer:\", e);\n          }\n        }\n      }\n\n      // Import categories\n      if (importData.categories && Array.isArray(importData.categories)) {\n        for (const category of importData.categories) {\n          try {\n            await storage.createCategory(category);\n            importedCount.categories++;\n          } catch (e) {\n            console.error(\"Failed to import category:\", e);\n          }\n        }\n      }\n\n      // Import products\n      if (importData.products && Array.isArray(importData.products)) {\n        for (const product of importData.products) {\n          try {\n            await storage.createProduct(product);\n            importedCount.products++;\n          } catch (e) {\n            console.error(\"Failed to import product:\", e);\n          }\n        }\n      }\n\n      // Import warehouses\n      if (importData.warehouses && Array.isArray(importData.warehouses)) {\n        for (const warehouse of importData.warehouses) {\n          try {\n            await storage.createWarehouse(warehouse);\n            importedCount.warehouses++;\n          } catch (e) {\n            console.error(\"Failed to import warehouse:\", e);\n          }\n        }\n      }\n\n      // Import service requests\n      if (importData.serviceRequests && Array.isArray(importData.serviceRequests)) {\n        for (const request of importData.serviceRequests) {\n          try {\n            await storage.createServiceRequest(request);\n            importedCount.serviceRequests++;\n          } catch (e) {\n            console.error(\"Failed to import service request:\", e);\n          }\n        }\n      }\n\n      // Log activity\n      await storage.logActivity({\n        userId: currentUser.id,\n        action: \"import\",\n        entityType: \"system_data\",\n        entityId: null,\n        description: `تم استيراد البيانات بواسطة ${currentUser.fullName}`\n      });\n\n      res.json({ \n        message: \"تم استيراد البيانات بنجاح\",\n        imported: importedCount\n      });\n    } catch (error) {\n      console.error(\"Import data error:\", error);\n      res.status(500).json({ message: \"خطأ في استيراد البيانات\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":54588},"server/storage.ts":{"content":"import type { \n  User, InsertUser, \n  ServiceCenter, InsertServiceCenter,\n  Customer, InsertCustomer,\n  Category, InsertCategory,\n  Product, InsertProduct,\n  ServiceRequest, InsertServiceRequest,\n  ServiceRequestFollowUp, InsertServiceRequestFollowUp,\n  Warehouse, InsertWarehouse,\n  SparePart, InsertSparePart,\n  Inventory, InsertInventory,\n  ProductInventory, InsertProductInventory,\n  PartsTransfer, InsertPartsTransfer,\n  ActivityLog, InsertActivityLog\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n\n  // Service Centers\n  getAllServiceCenters(): Promise<ServiceCenter[]>;\n  getServiceCenter(id: string): Promise<ServiceCenter | undefined>;\n  createServiceCenter(center: InsertServiceCenter): Promise<ServiceCenter>;\n  updateServiceCenter(id: string, center: Partial<InsertServiceCenter>): Promise<ServiceCenter>;\n  deleteServiceCenter(id: string): Promise<void>;\n\n  // Customers\n  getAllCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer>;\n  deleteCustomer(id: string): Promise<void>;\n\n  // Categories\n  getAllCategories(): Promise<Category[]>;\n  getCategory(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(id: string): Promise<void>;\n\n  // Products\n  getAllProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n\n  // Service Requests\n  getAllServiceRequests(): Promise<ServiceRequest[]>;\n  getServiceRequest(id: string): Promise<ServiceRequest | undefined>;\n  createServiceRequest(request: InsertServiceRequest): Promise<ServiceRequest>;\n  updateServiceRequest(id: string, request: Partial<InsertServiceRequest>): Promise<ServiceRequest>;\n  deleteServiceRequest(id: string): Promise<void>;\n\n  // Service Request Follow-ups\n  getServiceRequestFollowUps(serviceRequestId: string): Promise<ServiceRequestFollowUp[]>;\n  createServiceRequestFollowUp(followUp: InsertServiceRequestFollowUp): Promise<ServiceRequestFollowUp>;\n\n  // Warehouses\n  getAllWarehouses(): Promise<Warehouse[]>;\n  getWarehouse(id: string): Promise<Warehouse | undefined>;\n  createWarehouse(warehouse: InsertWarehouse): Promise<Warehouse>;\n  updateWarehouse(id: string, warehouse: Partial<InsertWarehouse>): Promise<Warehouse>;\n  deleteWarehouse(id: string): Promise<void>;\n\n  // Dashboard Stats\n  getDashboardStats(): Promise<any>;\n  getRecentServiceRequests(): Promise<any[]>;\n  getRecentActivities(): Promise<ActivityLog[]>;\n\n  // Activity Logs\n  logActivity(activity: InsertActivityLog): Promise<ActivityLog>;\n\n  // Product Inventory\n  getProductInventory(warehouseId: string): Promise<ProductInventory[]>;\n  getProductInventoryByProduct(productId: string): Promise<ProductInventory[]>;\n  getProductInventoryItem(warehouseId: string, productId: string): Promise<ProductInventory | undefined>;\n  createProductInventory(inventory: InsertProductInventory): Promise<ProductInventory>;\n  updateProductInventory(id: string, inventory: Partial<InsertProductInventory>): Promise<ProductInventory>;\n  deleteProductInventory(id: string): Promise<void>;\n}\n\nfunction generateId(): string {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private serviceCenters: Map<string, ServiceCenter> = new Map();\n  private customers: Map<string, Customer> = new Map();\n  private categories: Map<string, Category> = new Map();\n  private products: Map<string, Product> = new Map();\n  private serviceRequests: Map<string, ServiceRequest> = new Map();\n  private serviceRequestFollowUps: Map<string, ServiceRequestFollowUp> = new Map();\n  private warehouses: Map<string, Warehouse> = new Map();\n  private activityLogs: Map<string, ActivityLog> = new Map();\n  private productInventory: Map<string, ProductInventory> = new Map();\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Sample Users\n    const sampleUsers: User[] = [\n      {\n        id: \"user-1\",\n        email: \"admin@sokany.com\",\n        password: \"hashed_password\",\n        fullName: \"أحمد محمد\",\n        phone: \"+966501234567\",\n        address: \"الرياض، المملكة العربية السعودية\",\n        role: \"admin\",\n        status: \"active\",\n        centerId: null,\n        createdAt: new Date(\"2024-01-15\"),\n        updatedAt: new Date(\"2024-01-15\")\n      },\n      {\n        id: \"user-2\",\n        email: \"manager@sokany.com\",\n        password: \"hashed_password\",\n        fullName: \"سارة أحمد\",\n        phone: \"+966502345678\",\n        address: \"جدة، المملكة العربية السعودية\",\n        role: \"manager\",\n        status: \"active\",\n        centerId: \"center-1\",\n        createdAt: new Date(\"2024-02-01\"),\n        updatedAt: new Date(\"2024-02-01\")\n      },\n      {\n        id: \"user-3\",\n        email: \"tech@sokany.com\",\n        password: \"hashed_password\",\n        fullName: \"محمد علي\",\n        phone: \"+966503456789\",\n        address: \"الدمام، المملكة العربية السعودية\",\n        role: \"technician\",\n        status: \"active\",\n        centerId: \"center-1\",\n        createdAt: new Date(\"2024-02-15\"),\n        updatedAt: new Date(\"2024-02-15\")\n      },\n      {\n        id: \"customer-1\",\n        email: \"customer@sokany.com\",\n        password: \"hashed_password\",\n        fullName: \"خالد السعيد\",\n        phone: \"+966501111111\",\n        address: \"حي الملز، الرياض\",\n        role: \"customer\",\n        status: \"active\",\n        centerId: \"center-1\",\n        createdAt: new Date(\"2024-03-01\"),\n        updatedAt: new Date(\"2024-03-01\")\n      }\n    ];\n\n    // Sample Service Centers\n    const sampleCenters: ServiceCenter[] = [\n      {\n        id: \"center-1\",\n        name: \"مركز الرياض الرئيسي\",\n        address: \"شارع الملك فهد، الرياض 12345\",\n        phone: \"+966114567890\",\n        email: \"riyadh@sokany.com\",\n        managerId: \"user-2\",\n        isActive: true,\n        createdAt: new Date(\"2024-01-01\"),\n        updatedAt: new Date(\"2024-01-01\")\n      },\n      {\n        id: \"center-2\",\n        name: \"مركز جدة\",\n        address: \"طريق الملك عبدالعزيز، جدة 21441\",\n        phone: \"+966122345678\",\n        email: \"jeddah@sokany.com\",\n        managerId: null,\n        isActive: true,\n        createdAt: new Date(\"2024-01-10\"),\n        updatedAt: new Date(\"2024-01-10\")\n      }\n    ];\n\n    // Sample Customers\n    const sampleCustomers: Customer[] = [\n      {\n        id: \"customer-1\",\n        fullName: \"خالد السعيد\",\n        phone: \"+966501111111\",\n        email: \"khalid@gmail.com\",\n        address: \"حي الملز، الرياض\",\n        centerId: \"center-1\",\n        createdAt: new Date(\"2024-03-01\"),\n        updatedAt: new Date(\"2024-03-01\")\n      },\n      {\n        id: \"customer-2\",\n        fullName: \"فاطمة الزهراء\",\n        phone: \"+966502222222\",\n        email: \"fatima@hotmail.com\",\n        address: \"حي الروضة، جدة\",\n        centerId: \"center-2\",\n        createdAt: new Date(\"2024-03-05\"),\n        updatedAt: new Date(\"2024-03-05\")\n      }\n    ];\n\n    // Sample Categories\n    const sampleCategories: Category[] = [\n      {\n        id: \"cat-1\",\n        name: \"أجهزة المنزل\",\n        description: \"الأجهزة المنزلية الكهربائية\",\n        createdAt: new Date(\"2024-01-01\")\n      },\n      {\n        id: \"cat-2\",\n        name: \"أجهزة المطبخ\",\n        description: \"أجهزة المطبخ الكهربائية\",\n        createdAt: new Date(\"2024-01-01\")\n      }\n    ];\n\n    // Sample Products\n    const sampleProducts: Product[] = [\n      {\n        id: \"prod-1\",\n        name: \"غسالة أتوماتيك\",\n        model: \"SW-8000\",\n        categoryId: \"cat-1\",\n        description: \"غسالة أتوماتيك 8 كيلو\",\n        createdAt: new Date(\"2024-01-01\")\n      },\n      {\n        id: \"prod-2\",\n        name: \"ثلاجة مزدوجة\",\n        model: \"RF-500\",\n        categoryId: \"cat-1\",\n        description: \"ثلاجة مزدوجة الأبواب\",\n        createdAt: new Date(\"2024-01-01\")\n      }\n    ];\n\n    // Sample Warehouses\n    const sampleWarehouses: Warehouse[] = [\n      {\n        id: \"warehouse-1\",\n        name: \"مخزن الرياض الرئيسي\",\n        location: \"حي الملز، الرياض\",\n        managerId: \"user-2\",\n        centerId: \"center-1\",\n        createdAt: new Date(\"2024-01-20\")\n      },\n      {\n        id: \"warehouse-2\",\n        name: \"مخزن جدة الفرعي\",\n        location: \"حي الروضة، جدة\",\n        managerId: null,\n        centerId: \"center-2\",\n        createdAt: new Date(\"2024-02-01\")\n      }\n    ];\n\n    // Sample Service Requests\n    const sampleRequests: ServiceRequest[] = [\n      {\n        id: \"req-1\",\n        requestNumber: \"SR-2024-001\",\n        customerId: \"customer-1\",\n        productId: \"prod-1\",\n        deviceName: \"غسالة أتوماتيك\",\n        model: \"SW-8000\",\n        issue: \"لا تعمل الغسالة عند الضغط على زر التشغيل\",\n        status: \"in_progress\",\n        centerId: \"center-1\",\n        technicianId: \"user-3\", // Assigned to technician\n        estimatedCost: 250,\n        actualCost: null,\n        notes: \"تم تعيين الفني لهذا الطلب\",\n        createdAt: new Date(\"2024-09-01\"),\n        updatedAt: new Date(\"2024-09-01\"),\n        completedAt: null\n      },\n      {\n        id: \"req-2\",\n        requestNumber: \"SR-2024-002\",\n        customerId: \"customer-2\",\n        productId: \"prod-2\",\n        deviceName: \"ثلاجة مزدوجة\",\n        model: \"RF-500\",\n        issue: \"الثلاجة لا تبرد بشكل جيد\",\n        status: \"pending\",\n        centerId: \"center-2\",\n        technicianId: null,\n        estimatedCost: 400,\n        actualCost: null,\n        notes: \"تم الكشف على الجهاز وتحديد المشكلة\",\n        createdAt: new Date(\"2024-08-28\"),\n        updatedAt: new Date(\"2024-09-02\"),\n        completedAt: null\n      },\n      {\n        id: \"req-3\",\n        requestNumber: \"SR-2024-003\",\n        customerId: \"customer-1\",\n        productId: \"prod-2\",\n        deviceName: \"ثلاجة مزدوجة\",\n        model: \"RF-500\",\n        issue: \"الثلاجة تصدر صوت عالي\",\n        status: \"in_progress\",\n        centerId: \"center-1\",\n        technicianId: \"user-3\", // Assigned to technician\n        estimatedCost: 300,\n        actualCost: null,\n        notes: \"تم تعيين الفني للكشف على الجهاز\",\n        createdAt: new Date(\"2024-09-05\"),\n        updatedAt: new Date(\"2024-09-05\"),\n        completedAt: null\n      }\n    ];\n\n    // Sample Follow-ups for service requests\n    const sampleFollowUps: ServiceRequestFollowUp[] = [\n      {\n        id: \"followup-1\",\n        serviceRequestId: \"req-1\",\n        technicianId: \"user-3\",\n        followUpText: \"تم الوصول للعميل والكشف على الجهاز. المشكلة في لوحة التحكم الإلكترونية.\",\n        createdAt: new Date(\"2024-09-01T10:30:00\")\n      },\n      {\n        id: \"followup-2\",\n        serviceRequestId: \"req-1\",\n        technicianId: \"user-3\",\n        followUpText: \"تم طلب قطعة الغيار المطلوبة. سيتم التركيب غداً بإذن الله.\",\n        createdAt: new Date(\"2024-09-01T14:00:00\")\n      }\n    ];\n\n    // Sample Activity Logs\n    const sampleActivities: ActivityLog[] = [\n      {\n        id: \"activity-1\",\n        userId: \"user-1\",\n        action: \"create\",\n        entityType: \"service_request\",\n        entityId: \"req-1\",\n        description: \"تم إنشاء طلب صيانة جديد للعميل خالد السعيد\",\n        createdAt: new Date(\"2024-09-01\")\n      },\n      {\n        id: \"activity-2\",\n        userId: \"user-2\",\n        action: \"update\",\n        entityType: \"service_request\",\n        entityId: \"req-2\",\n        description: \"تم تحديث حالة طلب الصيانة إلى قيد التقدم\",\n        createdAt: new Date(\"2024-09-02\")\n      }\n    ];\n\n    // Sample Product Inventory\n    const sampleProductInventory: ProductInventory[] = [\n      {\n        id: \"inv-prod-1\",\n        warehouseId: \"warehouse-1\",\n        productId: \"prod-1\",\n        quantity: 15,\n        minQuantity: 5,\n        lastRestockDate: new Date(\"2024-08-15\"),\n        updatedAt: new Date(\"2024-09-01\")\n      },\n      {\n        id: \"inv-prod-2\",\n        warehouseId: \"warehouse-1\",\n        productId: \"prod-2\",\n        quantity: 8,\n        minQuantity: 3,\n        lastRestockDate: new Date(\"2024-08-20\"),\n        updatedAt: new Date(\"2024-09-01\")\n      },\n      {\n        id: \"inv-prod-3\",\n        warehouseId: \"warehouse-2\",\n        productId: \"prod-1\",\n        quantity: 12,\n        minQuantity: 5,\n        lastRestockDate: new Date(\"2024-08-10\"),\n        updatedAt: new Date(\"2024-08-28\")\n      },\n      {\n        id: \"inv-prod-4\",\n        warehouseId: \"warehouse-2\",\n        productId: \"prod-2\",\n        quantity: 5,\n        minQuantity: 3,\n        lastRestockDate: new Date(\"2024-08-25\"),\n        updatedAt: new Date(\"2024-08-28\")\n      }\n    ];\n\n    // Populate maps\n    sampleUsers.forEach(user => this.users.set(user.id, user));\n    sampleCenters.forEach(center => this.serviceCenters.set(center.id, center));\n    sampleCustomers.forEach(customer => this.customers.set(customer.id, customer));\n    sampleCategories.forEach(category => this.categories.set(category.id, category));\n    sampleProducts.forEach(product => this.products.set(product.id, product));\n    sampleWarehouses.forEach(warehouse => this.warehouses.set(warehouse.id, warehouse));\n    sampleRequests.forEach(request => this.serviceRequests.set(request.id, request));\n    sampleFollowUps.forEach(followup => this.serviceRequestFollowUps.set(followup.id, followup));\n    sampleActivities.forEach(activity => this.activityLogs.set(activity.id, activity));\n    sampleProductInventory.forEach(inventory => this.productInventory.set(inventory.id, inventory));\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const user: User = {\n      id: generateId(),\n      ...userData,\n      phone: userData.phone ?? null,\n      address: userData.address ?? null,\n      role: userData.role ?? \"customer\",\n      status: userData.status ?? \"pending\",\n      centerId: userData.centerId ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const existingUser = this.users.get(id);\n    if (!existingUser) throw new Error('User not found');\n    \n    const updatedUser: User = {\n      ...existingUser,\n      ...userData,\n      updatedAt: new Date()\n    };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    this.users.delete(id);\n  }\n\n  // Service Centers\n  async getAllServiceCenters(): Promise<ServiceCenter[]> {\n    return Array.from(this.serviceCenters.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getServiceCenter(id: string): Promise<ServiceCenter | undefined> {\n    return this.serviceCenters.get(id);\n  }\n\n  async createServiceCenter(centerData: InsertServiceCenter): Promise<ServiceCenter> {\n    const center: ServiceCenter = {\n      id: generateId(),\n      ...centerData,\n      phone: centerData.phone ?? null,\n      email: centerData.email ?? null,\n      managerId: centerData.managerId ?? null,\n      isActive: centerData.isActive ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.serviceCenters.set(center.id, center);\n    return center;\n  }\n\n  async updateServiceCenter(id: string, centerData: Partial<InsertServiceCenter>): Promise<ServiceCenter> {\n    const existingCenter = this.serviceCenters.get(id);\n    if (!existingCenter) throw new Error('Service center not found');\n    \n    const updatedCenter: ServiceCenter = {\n      ...existingCenter,\n      ...centerData,\n      updatedAt: new Date()\n    };\n    this.serviceCenters.set(id, updatedCenter);\n    return updatedCenter;\n  }\n\n  async deleteServiceCenter(id: string): Promise<void> {\n    this.serviceCenters.delete(id);\n  }\n\n  // Customers\n  async getAllCustomers(): Promise<Customer[]> {\n    return Array.from(this.customers.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    return this.customers.get(id);\n  }\n\n  async createCustomer(customerData: InsertCustomer): Promise<Customer> {\n    const customer: Customer = {\n      id: generateId(),\n      ...customerData,\n      email: customerData.email ?? null,\n      address: customerData.address ?? null,\n      centerId: customerData.centerId ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.customers.set(customer.id, customer);\n    return customer;\n  }\n\n  async updateCustomer(id: string, customerData: Partial<InsertCustomer>): Promise<Customer> {\n    const existingCustomer = this.customers.get(id);\n    if (!existingCustomer) throw new Error('Customer not found');\n    \n    const updatedCustomer: Customer = {\n      ...existingCustomer,\n      ...customerData,\n      updatedAt: new Date()\n    };\n    this.customers.set(id, updatedCustomer);\n    return updatedCustomer;\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    this.customers.delete(id);\n  }\n\n  // Categories\n  async getAllCategories(): Promise<Category[]> {\n    return Array.from(this.categories.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    return this.categories.get(id);\n  }\n\n  async createCategory(categoryData: InsertCategory): Promise<Category> {\n    const category: Category = {\n      id: generateId(),\n      ...categoryData,\n      description: categoryData.description ?? null,\n      createdAt: new Date()\n    };\n    this.categories.set(category.id, category);\n    return category;\n  }\n\n  async updateCategory(id: string, categoryData: Partial<InsertCategory>): Promise<Category> {\n    const existingCategory = this.categories.get(id);\n    if (!existingCategory) throw new Error('Category not found');\n    \n    const updatedCategory: Category = {\n      ...existingCategory,\n      ...categoryData\n    };\n    this.categories.set(id, updatedCategory);\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    this.categories.delete(id);\n  }\n\n  // Products\n  async getAllProducts(): Promise<Product[]> {\n    return Array.from(this.products.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    return this.products.get(id);\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const product: Product = {\n      id: generateId(),\n      ...productData,\n      model: productData.model ?? null,\n      description: productData.description ?? null,\n      createdAt: new Date()\n    };\n    this.products.set(product.id, product);\n    return product;\n  }\n\n  async updateProduct(id: string, productData: Partial<InsertProduct>): Promise<Product> {\n    const existingProduct = this.products.get(id);\n    if (!existingProduct) throw new Error('Product not found');\n    \n    const updatedProduct: Product = {\n      ...existingProduct,\n      ...productData\n    };\n    this.products.set(id, updatedProduct);\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    this.products.delete(id);\n  }\n\n  // Service Requests\n  async getAllServiceRequests(): Promise<ServiceRequest[]> {\n    return Array.from(this.serviceRequests.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getServiceRequest(id: string): Promise<ServiceRequest | undefined> {\n    return this.serviceRequests.get(id);\n  }\n\n  async createServiceRequest(requestData: InsertServiceRequest): Promise<ServiceRequest> {\n    const request: ServiceRequest = {\n      id: generateId(),\n      ...requestData,\n      model: requestData.model ?? null,\n      status: requestData.status ?? \"pending\",\n      technicianId: requestData.technicianId ?? null,\n      estimatedCost: requestData.estimatedCost ?? null,\n      actualCost: requestData.actualCost ?? null,\n      notes: requestData.notes ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      completedAt: null\n    };\n    this.serviceRequests.set(request.id, request);\n    return request;\n  }\n\n  async updateServiceRequest(id: string, requestData: Partial<InsertServiceRequest>): Promise<ServiceRequest> {\n    const existingRequest = this.serviceRequests.get(id);\n    if (!existingRequest) throw new Error('Service request not found');\n    \n    const updatedRequest: ServiceRequest = {\n      ...existingRequest,\n      ...requestData,\n      updatedAt: new Date()\n    };\n    this.serviceRequests.set(id, updatedRequest);\n    return updatedRequest;\n  }\n\n  async deleteServiceRequest(id: string): Promise<void> {\n    this.serviceRequests.delete(id);\n  }\n\n  // Service Request Follow-ups\n  async getServiceRequestFollowUps(serviceRequestId: string): Promise<ServiceRequestFollowUp[]> {\n    return Array.from(this.serviceRequestFollowUps.values())\n      .filter(followUp => followUp.serviceRequestId === serviceRequestId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createServiceRequestFollowUp(followUpData: InsertServiceRequestFollowUp): Promise<ServiceRequestFollowUp> {\n    const followUp: ServiceRequestFollowUp = {\n      id: generateId(),\n      ...followUpData,\n      createdAt: new Date()\n    };\n    this.serviceRequestFollowUps.set(followUp.id, followUp);\n    return followUp;\n  }\n\n  // Warehouses CRUD\n  async getAllWarehouses(): Promise<Warehouse[]> {\n    return Array.from(this.warehouses.values()).sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async getWarehouse(id: string): Promise<Warehouse | undefined> {\n    return this.warehouses.get(id);\n  }\n\n  async createWarehouse(warehouseData: InsertWarehouse): Promise<Warehouse> {\n    const warehouse: Warehouse = {\n      id: generateId(),\n      ...warehouseData,\n      managerId: warehouseData.managerId ?? null,\n      centerId: warehouseData.centerId ?? null,\n      createdAt: new Date()\n    };\n    this.warehouses.set(warehouse.id, warehouse);\n    return warehouse;\n  }\n\n  async updateWarehouse(id: string, warehouseData: Partial<InsertWarehouse>): Promise<Warehouse> {\n    const existingWarehouse = this.warehouses.get(id);\n    if (!existingWarehouse) throw new Error('Warehouse not found');\n    \n    const updatedWarehouse: Warehouse = {\n      ...existingWarehouse,\n      ...warehouseData\n    };\n    this.warehouses.set(id, updatedWarehouse);\n    return updatedWarehouse;\n  }\n\n  async deleteWarehouse(id: string): Promise<void> {\n    this.warehouses.delete(id);\n  }\n\n  // Dashboard Stats\n  async getDashboardStats(): Promise<any> {\n    return {\n      totalUsers: this.users.size,\n      serviceRequests: this.serviceRequests.size,\n      serviceCenters: this.serviceCenters.size,\n      revenue: 125490\n    };\n  }\n\n  async getRecentServiceRequests(): Promise<any[]> {\n    const requests = Array.from(this.serviceRequests.values())\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime())\n      .slice(0, 5);\n    \n    return requests.map(request => {\n      const customer = this.customers.get(request.customerId);\n      return {\n        ...request,\n        customerName: customer?.fullName || \"عميل غير محدد\"\n      };\n    });\n  }\n\n  async getRecentActivities(): Promise<ActivityLog[]> {\n    return Array.from(this.activityLogs.values())\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime())\n      .slice(0, 10);\n  }\n\n  // Activity Logs\n  async logActivity(activityData: InsertActivityLog): Promise<ActivityLog> {\n    const activity: ActivityLog = {\n      id: generateId(),\n      ...activityData,\n      entityId: activityData.entityId ?? null,\n      createdAt: new Date()\n    };\n    this.activityLogs.set(activity.id, activity);\n    return activity;\n  }\n\n  // Product Inventory\n  async getProductInventory(warehouseId: string): Promise<ProductInventory[]> {\n    return Array.from(this.productInventory.values())\n      .filter(inventory => inventory.warehouseId === warehouseId)\n      .sort((a, b) => new Date(b.updatedAt!).getTime() - new Date(a.updatedAt!).getTime());\n  }\n\n  async getProductInventoryByProduct(productId: string): Promise<ProductInventory[]> {\n    return Array.from(this.productInventory.values())\n      .filter(inventory => inventory.productId === productId)\n      .sort((a, b) => new Date(b.updatedAt!).getTime() - new Date(a.updatedAt!).getTime());\n  }\n\n  async getProductInventoryItem(warehouseId: string, productId: string): Promise<ProductInventory | undefined> {\n    return Array.from(this.productInventory.values())\n      .find(inventory => inventory.warehouseId === warehouseId && inventory.productId === productId);\n  }\n\n  async createProductInventory(inventoryData: InsertProductInventory): Promise<ProductInventory> {\n    const inventory: ProductInventory = {\n      id: generateId(),\n      ...inventoryData,\n      quantity: inventoryData.quantity ?? 0,\n      minQuantity: inventoryData.minQuantity ?? 5,\n      lastRestockDate: null,\n      updatedAt: new Date()\n    };\n    this.productInventory.set(inventory.id, inventory);\n    return inventory;\n  }\n\n  async updateProductInventory(id: string, inventoryData: Partial<InsertProductInventory>): Promise<ProductInventory> {\n    const existingInventory = this.productInventory.get(id);\n    if (!existingInventory) throw new Error('Product inventory not found');\n    \n    const updatedInventory: ProductInventory = {\n      ...existingInventory,\n      ...inventoryData,\n      updatedAt: new Date()\n    };\n    this.productInventory.set(id, updatedInventory);\n    return updatedInventory;\n  }\n\n  async deleteProductInventory(id: string): Promise<void> {\n    this.productInventory.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":27714},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, uuid, integer, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['admin', 'manager', 'technician', 'receptionist', 'warehouse_manager', 'customer']);\nexport const userStatusEnum = pgEnum('user_status', ['active', 'inactive', 'pending']);\nexport const serviceRequestStatusEnum = pgEnum('service_request_status', ['pending', 'in_progress', 'completed', 'cancelled']);\nexport const transferStatusEnum = pgEnum('transfer_status', ['pending', 'approved', 'rejected', 'completed']);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  role: userRoleEnum(\"role\").notNull().default('customer'),\n  status: userStatusEnum(\"status\").notNull().default('pending'),\n  centerId: uuid(\"center_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Service Centers table\nexport const serviceCenters = pgTable(\"service_centers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  phone: text(\"phone\"),\n  email: text(\"email\"),\n  managerId: uuid(\"manager_id\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  address: text(\"address\"),\n  centerId: uuid(\"center_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product Categories table\nexport const categories = pgTable(\"categories\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  model: text(\"model\"),\n  categoryId: uuid(\"category_id\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Service Requests table\nexport const serviceRequests = pgTable(\"service_requests\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  requestNumber: text(\"request_number\").notNull().unique(),\n  customerId: uuid(\"customer_id\").notNull(),\n  productId: uuid(\"product_id\").notNull(),\n  deviceName: text(\"device_name\").notNull(),\n  model: text(\"model\"),\n  issue: text(\"issue\").notNull(),\n  status: serviceRequestStatusEnum(\"status\").notNull().default('pending'),\n  centerId: uuid(\"center_id\").notNull(),\n  technicianId: uuid(\"technician_id\"),\n  estimatedCost: integer(\"estimated_cost\"),\n  actualCost: integer(\"actual_cost\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\n// Service Request Follow-ups table\nexport const serviceRequestFollowUps = pgTable(\"service_request_follow_ups\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  serviceRequestId: uuid(\"service_request_id\").notNull(),\n  technicianId: uuid(\"technician_id\").notNull(),\n  followUpText: text(\"follow_up_text\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Warehouses table\nexport const warehouses = pgTable(\"warehouses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  location: text(\"location\").notNull(),\n  managerId: uuid(\"manager_id\"),\n  centerId: uuid(\"center_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Spare Parts table\nexport const spareParts = pgTable(\"spare_parts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  partNumber: text(\"part_number\").notNull().unique(),\n  categoryId: uuid(\"category_id\"),\n  price: integer(\"price\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Inventory table (for spare parts)\nexport const inventory = pgTable(\"inventory\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  warehouseId: uuid(\"warehouse_id\").notNull(),\n  sparePartId: uuid(\"spare_part_id\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(0),\n  minQuantity: integer(\"min_quantity\").default(5),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Product Inventory table (for products)\nexport const productInventory = pgTable(\"product_inventory\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  warehouseId: uuid(\"warehouse_id\").notNull(),\n  productId: uuid(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(0),\n  minQuantity: integer(\"min_quantity\").default(5),\n  lastRestockDate: timestamp(\"last_restock_date\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Parts Transfers table\nexport const partsTransfers = pgTable(\"parts_transfers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromWarehouseId: uuid(\"from_warehouse_id\").notNull(),\n  toWarehouseId: uuid(\"to_warehouse_id\").notNull(),\n  sparePartId: uuid(\"spare_part_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  status: transferStatusEnum(\"status\").notNull().default('pending'),\n  requestedBy: uuid(\"requested_by\").notNull(),\n  approvedBy: uuid(\"approved_by\"),\n  reason: text(\"reason\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Activity Logs table\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull(),\n  action: text(\"action\").notNull(),\n  entityType: text(\"entity_type\").notNull(),\n  entityId: uuid(\"entity_id\"),\n  description: text(\"description\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas - Modified for MemStorage compatibility\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  centerId: z.string().nullable().optional().transform(val => val === \"\" ? null : val),\n});\n\nexport const insertServiceCenterSchema = createInsertSchema(serviceCenters).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  managerId: z.string().nullable().optional().transform(val => val === \"\" ? null : val),\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  categoryId: z.string(),\n});\n\nexport const insertServiceRequestSchema = createInsertSchema(serviceRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  completedAt: true,\n}).extend({\n  customerId: z.string(),\n  productId: z.string(),\n  centerId: z.string(),\n  technicianId: z.string().nullable().optional(),\n});\n\nexport const insertWarehouseSchema = createInsertSchema(warehouses).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  managerId: z.string().nullable().optional(),\n  centerId: z.string().nullable().optional(),\n});\n\nexport const insertSparePartSchema = createInsertSchema(spareParts).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  categoryId: z.string().nullable().optional(),\n});\n\nexport const insertInventorySchema = createInsertSchema(inventory).omit({\n  id: true,\n  updatedAt: true,\n}).extend({\n  warehouseId: z.string(),\n  sparePartId: z.string(),\n});\n\nexport const insertProductInventorySchema = createInsertSchema(productInventory).omit({\n  id: true,\n  updatedAt: true,\n}).extend({\n  warehouseId: z.string(),\n  productId: z.string(),\n});\n\nexport const insertPartsTransferSchema = createInsertSchema(partsTransfers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  fromWarehouseId: z.string(),\n  toWarehouseId: z.string(),\n  sparePartId: z.string(),\n  requestedBy: z.string(),\n  approvedBy: z.string().nullable().optional(),\n});\n\nexport const insertActivityLogSchema = createInsertSchema(activityLogs).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  userId: z.string(),\n  entityId: z.string().nullable().optional(),\n});\n\nexport const insertServiceRequestFollowUpSchema = createInsertSchema(serviceRequestFollowUps).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  serviceRequestId: z.string(),\n  technicianId: z.string(),\n  newStatus: z.enum(['pending', 'in_progress', 'completed', 'cancelled']).optional(),\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertServiceCenter = z.infer<typeof insertServiceCenterSchema>;\nexport type ServiceCenter = typeof serviceCenters.$inferSelect;\n\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Customer = typeof customers.$inferSelect;\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\nexport type InsertServiceRequest = z.infer<typeof insertServiceRequestSchema>;\nexport type ServiceRequest = typeof serviceRequests.$inferSelect;\n\nexport type InsertWarehouse = z.infer<typeof insertWarehouseSchema>;\nexport type Warehouse = typeof warehouses.$inferSelect;\n\nexport type InsertSparePart = z.infer<typeof insertSparePartSchema>;\nexport type SparePart = typeof spareParts.$inferSelect;\n\nexport type InsertInventory = z.infer<typeof insertInventorySchema>;\nexport type Inventory = typeof inventory.$inferSelect;\n\nexport type InsertProductInventory = z.infer<typeof insertProductInventorySchema>;\nexport type ProductInventory = typeof productInventory.$inferSelect;\n\nexport type InsertPartsTransfer = z.infer<typeof insertPartsTransferSchema>;\nexport type PartsTransfer = typeof partsTransfers.$inferSelect;\n\nexport type InsertActivityLog = z.infer<typeof insertActivityLogSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\n\nexport type InsertServiceRequestFollowUp = z.infer<typeof insertServiceRequestFollowUpSchema>;\nexport type ServiceRequestFollowUp = typeof serviceRequestFollowUps.$inferSelect;\n","size_bytes":10999},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./lib/auth\";\nimport { ThemeProvider } from \"./components/theme-provider\";\nimport LoginPage from \"./components/auth/login-page\";\nimport SignupPage from \"./components/auth/signup-page\";\nimport WaitingPage from \"./components/auth/waiting-page\";\nimport DashboardLayout from \"./components/layout/dashboard-layout\";\nimport Dashboard from \"./pages/dashboard\";\nimport Users from \"./pages/users\";\nimport ServiceRequests from \"./pages/service-requests\";\nimport Centers from \"./pages/centers\";\nimport Warehouses from \"./pages/warehouses\";\nimport Customers from \"./pages/customers\";\nimport Categories from \"./pages/categories\";\nimport Inventory from \"./pages/inventory\";\nimport Transfers from \"./pages/transfers\";\nimport Reports from \"./pages/reports\";\nimport Activities from \"./pages/activities\";\nimport Roles from \"./pages/roles\";\nimport Settings from \"./pages/settings\";\nimport DataManagement from \"./pages/data-management\";\nimport NotFound from \"@/pages/not-found\";\n\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LoginPage} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/signup\" component={SignupPage} />\n      <Route path=\"/waiting\" component={WaitingPage} />\n      \n      <Route path=\"/dashboard\">\n        <DashboardLayout>\n          <Dashboard />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/users\">\n        <DashboardLayout>\n          <Users />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/service-requests\">\n        <DashboardLayout>\n          <ServiceRequests />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/centers\">\n        <DashboardLayout>\n          <Centers />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/warehouses\">\n        <DashboardLayout>\n          <Warehouses />\n        </DashboardLayout>\n      </Route>\n\n      <Route path=\"/dashboard/inventory\">\n        <DashboardLayout>\n          <Inventory />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/customers\">\n        <DashboardLayout>\n          <Customers />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/categories\">\n        <DashboardLayout>\n          <Categories />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/transfers\">\n        <DashboardLayout>\n          <Transfers />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/reports\">\n        <DashboardLayout>\n          <Reports />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/activities\">\n        <DashboardLayout>\n          <Activities />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/roles\">\n        <DashboardLayout>\n          <Roles />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/settings\">\n        <DashboardLayout>\n          <Settings />\n        </DashboardLayout>\n      </Route>\n      \n      <Route path=\"/dashboard/data-management\">\n        <DashboardLayout>\n          <DataManagement />\n        </DashboardLayout>\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <ThemeProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </ThemeProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3857},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --card: #fcfcfc;\n  --ring: hsl(0, 0%, 41.96%);\n  --input: #b5b5b5;\n  --muted: #e3e3e3;\n  --accent: hsl(0, 0%, 100%);\n  --border: #e8e8e8;\n  --radius: 0.8rem;\n  --shadow: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --popover: hsl(45, 25%, 97%);\n  --primary: #eb1a4e;\n  --sidebar: hsl(45, 25%, 97%);\n  --spacing: 0.25rem;\n  --font-mono: Menlo, monospace;\n  --font-sans: 'Poppins', sans-serif;\n  --secondary: #c4c4c4;\n  --shadow-lg: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 4px 6px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 2px 4px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 8px 10px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --background: #f0f0f0;\n  --font-serif: 'Poppins', sans-serif;\n  --foreground: #1a1a1a;\n  --shadow-2xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --shadow-2xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --destructive: hsl(0, 0%, 0%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n  --sidebar-accent: hsl(25, 45%, 80%);\n  --sidebar-border: hsl(45, 15%, 80%);\n  --card-foreground: hsl(0, 0%, 0%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --tracking-normal: 0em;\n  --muted-foreground: #212121;\n  --accent-foreground: hsl(0, 0%, 10.2%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary-foreground: #ffffff;\n  --sidebar-foreground: hsl(20, 14%, 17%);\n  --secondary-foreground: #1a1a1a;\n  --destructive-foreground: #ffffff;\n  --sidebar-accent-foreground: hsl(20, 14%, 17%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --card: hsl(20, 14%, 8%);\n  --ring: hsl(9, 75%, 61%);\n  --input: hsl(20, 14%, 18%);\n  --muted: hsl(20, 14%, 15%);\n  --accent: hsl(25, 45%, 20%);\n  --border: hsl(20, 14%, 15%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --popover: hsl(20, 14%, 4%);\n  --primary: hsl(9, 75%, 61%);\n  --sidebar: hsl(20, 14%, 8%);\n  --secondary: hsl(30, 15%, 52%);\n  --background: hsl(20, 14%, 4%);\n  --foreground: hsl(45, 25%, 91%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n  --sidebar-accent: hsl(25, 45%, 20%);\n  --sidebar-border: hsl(20, 14%, 15%);\n  --card-foreground: hsl(45, 25%, 85%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --muted-foreground: hsl(45, 15%, 46%);\n  --accent-foreground: hsl(45, 25%, 85%);\n  --popover-foreground: hsl(45, 25%, 91%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(45, 25%, 85%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent-foreground: hsl(45, 25%, 85%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Poppins', sans-serif;\n  }\n}\n\n@layer components {\n  .sidebar-link.active {\n    background-color: hsl(var(--primary) / 0.1);\n    border-left: 3px solid hsl(var(--primary));\n    color: hsl(var(--primary));\n  }\n  \n  .notification-badge {\n    position: absolute;\n    top: -8px;\n    left: -8px;\n    background-color: hsl(var(--destructive));\n    color: hsl(var(--destructive-foreground));\n    border-radius: 50%;\n    width: 18px;\n    height: 18px;\n    font-size: 11px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-weight: 600;\n  }\n  \n  .status-badge {\n    padding: 4px 12px;\n    border-radius: 12px;\n    font-size: 11px;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n  }\n  \n  .status-pending {\n    background-color: hsl(43, 96%, 56% / 0.1);\n    color: hsl(43, 96%, 45%);\n    border: 1px solid hsl(43, 96%, 56% / 0.2);\n  }\n  \n  .status-in-progress {\n    background-color: hsl(var(--chart-1) / 0.1);\n    color: hsl(var(--chart-1));\n    border: 1px solid hsl(var(--chart-1) / 0.2);\n  }\n  \n  .status-completed {\n    background-color: hsl(var(--chart-2) / 0.1);\n    color: hsl(var(--chart-2));\n    border: 1px solid hsl(var(--chart-2) / 0.2);\n  }\n  \n  .status-cancelled {\n    background-color: hsl(var(--destructive) / 0.1);\n    color: hsl(var(--destructive));\n    border: 1px solid hsl(var(--destructive) / 0.2);\n  }\n  \n  .hover-scale {\n    transition: transform 0.2s ease-in-out;\n  }\n  \n  .hover-scale:hover {\n    transform: scale(1.02);\n  }\n  \n  .loading-spinner {\n    border: 2px solid hsl(var(--muted));\n    border-top: 2px solid hsl(var(--primary));\n    border-radius: 50%;\n    width: 20px;\n    height: 20px;\n    animation: spin 1s linear infinite;\n  }\n  \n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n}\n\n@media (max-width: 768px) {\n  .sidebar {\n    transform: translateX(100%);\n    transition: transform 0.3s ease-in-out;\n  }\n  \n  .sidebar.open {\n    transform: translateX(0);\n  }\n}\n","size_bytes":5615},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/theme-provider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n  storageKey = \"ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1605},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session\n    const savedUser = localStorage.getItem('user');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      return false;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1737},"client/src/lib/db.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport async function apiGet(endpoint: string) {\n  const response = await apiRequest('GET', endpoint);\n  return await response.json();\n}\n\nexport async function apiPost(endpoint: string, data: any) {\n  const response = await apiRequest('POST', endpoint, data);\n  return await response.json();\n}\n\nexport async function apiPut(endpoint: string, data: any) {\n  const response = await apiRequest('PUT', endpoint, data);\n  return await response.json();\n}\n\nexport async function apiDelete(endpoint: string) {\n  const response = await apiRequest('DELETE', endpoint);\n  return await response.json();\n}\n","size_bytes":638},"client/src/lib/permissions.ts":{"content":"// Permission system for role-based access control\n\nexport type UserRole = \"admin\" | \"manager\" | \"technician\" | \"receptionist\" | \"warehouse_manager\" | \"customer\";\n\nexport interface Permission {\n  read: boolean;\n  create: boolean;\n  update: boolean;\n  delete: boolean;\n}\n\n// Define what each role can access\nexport const rolePermissions: Record<UserRole, Record<string, Permission>> = {\n  admin: {\n    // Admin has full access to everything\n    dashboard: { read: true, create: true, update: true, delete: true },\n    users: { read: true, create: true, update: true, delete: true },\n    roles: { read: true, create: true, update: true, delete: true },\n    centers: { read: true, create: true, update: true, delete: true },\n    warehouses: { read: true, create: true, update: true, delete: true },\n    inventory: { read: true, create: true, update: true, delete: true },\n    customers: { read: true, create: true, update: true, delete: true },\n    categories: { read: true, create: true, update: true, delete: true },\n    serviceRequests: { read: true, create: true, update: true, delete: true },\n    transfers: { read: true, create: true, update: true, delete: true },\n    reports: { read: true, create: true, update: true, delete: true },\n    activities: { read: true, create: true, update: true, delete: true },\n    dataManagement: { read: true, create: true, update: true, delete: true },\n    settings: { read: true, create: true, update: true, delete: true },\n  },\n  \n  manager: {\n    // Manager can access their center's data only\n    dashboard: { read: true, create: false, update: false, delete: false },\n    inventory: { read: true, create: true, update: true, delete: false }, // Their center's warehouses only\n    customers: { read: true, create: true, update: true, delete: false }, // Their center only\n    categories: { read: true, create: true, update: true, delete: false },\n    serviceRequests: { read: true, create: true, update: true, delete: false }, // Their center only\n    transfers: { read: true, create: true, update: false, delete: false }, // Can only request TO their warehouse\n    reports: { read: true, create: false, update: false, delete: false }, // Their center only\n    activities: { read: true, create: false, update: false, delete: false }, // Their center only\n  },\n  \n  technician: {\n    // Technician can only see assigned service requests and add follow-ups\n    serviceRequests: { read: true, create: false, update: false, delete: false }, // Only assigned to them\n    serviceRequestFollowUps: { read: true, create: true, update: false, delete: false }, // Can add follow-ups only\n    customers: { read: true, create: false, update: false, delete: false }, // Related to their requests\n    categories: { read: true, create: false, update: false, delete: false }, // For reference\n  },\n  \n  receptionist: {\n    // Receptionist handles customers and can view service requests\n    dashboard: { read: true, create: false, update: false, delete: false },\n    customers: { read: true, create: true, update: true, delete: false },\n    serviceRequests: { read: true, create: true, update: false, delete: false }, // Their center only\n    categories: { read: true, create: false, update: false, delete: false },\n  },\n  \n  warehouse_manager: {\n    // Warehouse manager handles inventory and transfers\n    dashboard: { read: true, create: false, update: false, delete: false },\n    warehouses: { read: true, create: false, update: true, delete: false }, // Their warehouse only\n    inventory: { read: true, create: true, update: true, delete: false }, // Their warehouse inventory\n    categories: { read: true, create: true, update: true, delete: false }, // For spare parts\n    transfers: { read: true, create: true, update: true, delete: false }, // Their warehouse only\n    reports: { read: true, create: false, update: false, delete: false }, // Inventory reports only\n  },\n  \n  customer: {\n    // Customer can only see their own service requests\n    serviceRequests: { read: true, create: true, update: false, delete: false }, // Their own only\n  }\n};\n\n// Define which pages each role can access\nexport const rolePageAccess: Record<UserRole, string[]> = {\n  admin: [\n    \"dashboard\", \"users\", \"roles\", \"centers\", \"warehouses\", \"inventory\",\n    \"customers\", \"categories\", \"service-requests\", \"transfers\", \n    \"reports\", \"activities\", \"data-management\", \"settings\"\n  ],\n  manager: [\n    \"dashboard\", \"inventory\", \"customers\", \n    \"categories\", \"service-requests\", \"transfers\", \"reports\", \"activities\"\n  ],\n  technician: [\n    \"dashboard\", \"service-requests\"\n  ],\n  receptionist: [\n    \"dashboard\", \"customers\", \"service-requests\", \"categories\"\n  ],\n  warehouse_manager: [\n    \"dashboard\", \"warehouses\", \"inventory\", \"categories\", \"transfers\", \"reports\"\n  ],\n  customer: [\n    \"service-requests\"\n  ]\n};\n\nexport function hasPermission(\n  userRole: UserRole, \n  resource: string, \n  action: keyof Permission\n): boolean {\n  const permissions = rolePermissions[userRole];\n  if (!permissions || !permissions[resource]) {\n    return false;\n  }\n  return permissions[resource][action];\n}\n\nexport function canAccessPage(userRole: UserRole, page: string): boolean {\n  return rolePageAccess[userRole].includes(page);\n}\n\nexport function getAccessiblePages(userRole: UserRole): string[] {\n  return rolePageAccess[userRole];\n}\n\n// Helper functions for specific permissions\nexport function canRead(userRole: UserRole, resource: string): boolean {\n  return hasPermission(userRole, resource, 'read');\n}\n\nexport function canCreate(userRole: UserRole, resource: string): boolean {\n  return hasPermission(userRole, resource, 'create');\n}\n\nexport function canUpdate(userRole: UserRole, resource: string): boolean {\n  return hasPermission(userRole, resource, 'update');\n}\n\nexport function canDelete(userRole: UserRole, resource: string): boolean {\n  return hasPermission(userRole, resource, 'delete');\n}","size_bytes":5913},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/supabase.ts":{"content":"// Client-side should not connect to database directly\n// All database operations should go through API endpoints\n// This file is kept for potential future client-side database needs\n\nexport const db = {\n  // Placeholder - client uses API endpoints instead\n};\n","size_bytes":260},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/activities.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiGet } from \"../lib/db\";\nimport { format } from \"date-fns\";\nimport { ar } from \"date-fns/locale\";\n\nconst activityTypes = [\n  { key: 'all', name: 'جميع الأنشطة', icon: 'bi-activity' },\n  { key: 'user', name: 'أنشطة المستخدمين', icon: 'bi-person' },\n  { key: 'service-request', name: 'أنشطة طلبات الصيانة', icon: 'bi-tools' },\n  { key: 'center', name: 'أنشطة المراكز', icon: 'bi-building' },\n  { key: 'warehouse', name: 'أنشطة المخازن', icon: 'bi-shop' },\n  { key: 'customer', name: 'أنشطة العملاء', icon: 'bi-person-badge' },\n  { key: 'auth', name: 'أنشطة تسجيل الدخول', icon: 'bi-shield-check' },\n  { key: 'system', name: 'أنشطة النظام', icon: 'bi-gear' },\n];\n\nconst actionTypes = {\n  create: { name: 'إنشاء', color: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' },\n  update: { name: 'تحديث', color: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300' },\n  delete: { name: 'حذف', color: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300' },\n  login: { name: 'تسجيل دخول', color: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300' },\n  logout: { name: 'تسجيل خروج', color: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300' },\n  view: { name: 'عرض', color: 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300' },\n  export: { name: 'تصدير', color: 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300' },\n};\n\nconst mockActivities = [\n  {\n    id: '1',\n    type: 'user',\n    action: 'create',\n    userId: 'user-1',\n    userName: 'أحمد محمد',\n    userRole: 'admin',\n    description: 'إضافة مستخدم جديد: محمد علي',\n    resourceId: 'user-2',\n    resourceType: 'user',\n    ipAddress: '192.168.1.100',\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n    createdAt: '2024-09-08T10:30:00Z',\n  },\n  {\n    id: '2',\n    type: 'service-request',\n    action: 'update',\n    userId: 'user-3',\n    userName: 'سارة أحمد',\n    userRole: 'technician',\n    description: 'تحديث حالة طلب الصيانة إلى \"قيد التقدم\"',\n    resourceId: 'req-123',\n    resourceType: 'service-request',\n    ipAddress: '192.168.1.101',\n    userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X)',\n    createdAt: '2024-09-08T09:45:00Z',\n  },\n  {\n    id: '3',\n    type: 'auth',\n    action: 'login',\n    userId: 'user-2',\n    userName: 'محمد علي',\n    userRole: 'manager',\n    description: 'تسجيل دخول ناجح',\n    resourceId: null,\n    resourceType: null,\n    ipAddress: '192.168.1.102',\n    userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS)',\n    createdAt: '2024-09-08T08:15:00Z',\n  },\n  {\n    id: '4',\n    type: 'center',\n    action: 'create',\n    userId: 'user-1',\n    userName: 'أحمد محمد',\n    userRole: 'admin',\n    description: 'إضافة مركز خدمة جديد: مركز الرياض الرئيسي',\n    resourceId: 'center-456',\n    resourceType: 'center',\n    ipAddress: '192.168.1.100',\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n    createdAt: '2024-09-07T16:20:00Z',\n  },\n  {\n    id: '5',\n    type: 'customer',\n    action: 'update',\n    userId: 'user-4',\n    userName: 'فاطمة الزهراء',\n    userRole: 'receptionist',\n    description: 'تحديث بيانات العميل: خالد السعيد',\n    resourceId: 'customer-789',\n    resourceType: 'customer',\n    ipAddress: '192.168.1.103',\n    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n    createdAt: '2024-09-07T14:30:00Z',\n  },\n];\n\nexport default function Activities() {\n  const [selectedType, setSelectedType] = useState(\"all\");\n  const [selectedAction, setSelectedAction] = useState(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateRange, setDateRange] = useState(\"last-7-days\");\n\n  const { data: users } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: () => apiGet('/api/users'),\n  });\n\n  const { data: activities, isLoading } = useQuery({\n    queryKey: ['/api/activities'],\n    queryFn: () => Promise.resolve(mockActivities), // Mock data for now\n  });\n\n  const filteredActivities = activities?.filter((activity: any) => {\n    const matchesType = selectedType === 'all' || activity.type === selectedType;\n    const matchesAction = selectedAction === 'all' || activity.action === selectedAction;\n    const matchesSearch = \n      activity.userName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      activity.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      activity.ipAddress?.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesType && matchesAction && matchesSearch;\n  }) || [];\n\n  const getActivityIcon = (type: string, action: string) => {\n    const typeConfig = activityTypes.find(t => t.key === type);\n    if (action === 'create') return 'bi-plus-circle';\n    if (action === 'update') return 'bi-pencil-square';\n    if (action === 'delete') return 'bi-trash';\n    if (action === 'login') return 'bi-box-arrow-in-right';\n    if (action === 'logout') return 'bi-box-arrow-right';\n    return typeConfig?.icon || 'bi-activity';\n  };\n\n  const getUserRoleName = (role: string) => {\n    const roleNames: Record<string, string> = {\n      admin: 'مدير النظام',\n      manager: 'مدير مركز',\n      technician: 'فني',\n      receptionist: 'موظف استقبال',\n      warehouse_manager: 'مدير مخزن',\n      customer: 'عميل'\n    };\n    return roleNames[role] || role;\n  };\n\n  const exportActivities = () => {\n    // Mock export functionality\n    console.log('Exporting activities...');\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">سجل الأنشطة</h1>\n          <p className=\"text-muted-foreground\">مراقبة جميع الأنشطة والعمليات في النظام</p>\n        </div>\n        <Button variant=\"outline\" onClick={exportActivities} data-testid=\"button-export-activities\">\n          <i className=\"bi bi-download mr-2\"></i>\n          تصدير السجل\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">نوع النشاط</Label>\n              <Select value={selectedType} onValueChange={setSelectedType}>\n                <SelectTrigger data-testid=\"select-activity-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {activityTypes.map((type) => (\n                    <SelectItem key={type.key} value={type.key}>\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        <i className={`bi ${type.icon}`}></i>\n                        <span>{type.name}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">نوع العملية</Label>\n              <Select value={selectedAction} onValueChange={setSelectedAction}>\n                <SelectTrigger data-testid=\"select-action-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">جميع العمليات</SelectItem>\n                  {Object.entries(actionTypes).map(([key, action]) => (\n                    <SelectItem key={key} value={key}>\n                      {action.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">الفترة الزمنية</Label>\n              <Select value={dateRange} onValueChange={setDateRange}>\n                <SelectTrigger data-testid=\"select-date-range\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"today\">اليوم</SelectItem>\n                  <SelectItem value=\"yesterday\">أمس</SelectItem>\n                  <SelectItem value=\"last-7-days\">آخر 7 أيام</SelectItem>\n                  <SelectItem value=\"last-30-days\">آخر 30 يوم</SelectItem>\n                  <SelectItem value=\"this-month\">هذا الشهر</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">البحث</Label>\n              <Input\n                placeholder=\"البحث في الأنشطة...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"text-right\"\n                data-testid=\"input-search-activities\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3 space-x-reverse\">\n              <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                <i className=\"bi bi-activity text-chart-1\"></i>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">إجمالي الأنشطة</p>\n                <p className=\"text-2xl font-bold\">{activities?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3 space-x-reverse\">\n              <div className=\"w-10 h-10 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                <i className=\"bi bi-calendar-day text-chart-2\"></i>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">أنشطة اليوم</p>\n                <p className=\"text-2xl font-bold\">\n                  {activities?.filter((a: any) => {\n                    const today = new Date().toDateString();\n                    return new Date(a.createdAt).toDateString() === today;\n                  }).length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3 space-x-reverse\">\n              <div className=\"w-10 h-10 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                <i className=\"bi bi-people text-chart-3\"></i>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">مستخدمين نشطين</p>\n                <p className=\"text-2xl font-bold\">\n                  {new Set(activities?.map((a: any) => a.userId)).size || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3 space-x-reverse\">\n              <div className=\"w-10 h-10 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                <i className=\"bi bi-shield-check text-chart-4\"></i>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">عمليات تسجيل دخول</p>\n                <p className=\"text-2xl font-bold\">\n                  {activities?.filter((a: any) => a.action === 'login').length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Activities List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>سجل الأنشطة</span>\n            <span className=\"text-sm font-normal text-muted-foreground\">\n              عرض {filteredActivities.length} من {activities?.length || 0} نشاط\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <div className=\"loading-spinner mx-auto\"></div>\n              </div>\n            ) : filteredActivities.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                لا توجد أنشطة تطابق المعايير المحددة\n              </div>\n            ) : (\n              filteredActivities.map((activity: any) => (\n                <div\n                  key={activity.id}\n                  className=\"flex items-start space-x-4 space-x-reverse p-4 rounded-lg border hover:bg-muted/30 transition-colors\"\n                  data-testid={`activity-item-${activity.id}`}\n                >\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <i className={`bi ${getActivityIcon(activity.type, activity.action)} text-primary`}></i>\n                    </div>\n                  </div>\n\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <h4 className=\"font-medium text-card-foreground\">\n                          {activity.userName}\n                        </h4>\n                        <Badge className={actionTypes[activity.action as keyof typeof actionTypes]?.color}>\n                          {actionTypes[activity.action as keyof typeof actionTypes]?.name}\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {getUserRoleName(activity.userRole)}\n                        </span>\n                      </div>\n                      <time className=\"text-sm text-muted-foreground\">\n                        {format(new Date(activity.createdAt), 'dd MMM yyyy HH:mm', { locale: ar })}\n                      </time>\n                    </div>\n\n                    <p className=\"text-sm text-card-foreground mb-2\">\n                      {activity.description}\n                    </p>\n\n                    <div className=\"flex items-center space-x-4 space-x-reverse text-xs text-muted-foreground\">\n                      <div className=\"flex items-center space-x-1 space-x-reverse\">\n                        <i className=\"bi bi-globe\"></i>\n                        <span>{activity.ipAddress}</span>\n                      </div>\n                      {activity.resourceId && (\n                        <div className=\"flex items-center space-x-1 space-x-reverse\">\n                          <i className=\"bi bi-link-45deg\"></i>\n                          <span>معرف المورد: {activity.resourceId}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n\n          {filteredActivities.length > 0 && (\n            <div className=\"mt-6 flex items-center justify-center\">\n              <Button variant=\"outline\" data-testid=\"button-load-more\">\n                <i className=\"bi bi-arrow-down-circle mr-2\"></i>\n                تحميل المزيد\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16522},"client/src/pages/categories.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiGet, apiPost, apiPut, apiDelete } from \"../lib/db\";\nimport type { Category, InsertCategory, Product, InsertProduct } from \"@shared/schema\";\n\nexport default function Categories() {\n  const [activeTab, setActiveTab] = useState(\"categories\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  \n  // Category states\n  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [categoryFormData, setCategoryFormData] = useState<Partial<InsertCategory>>({});\n  \n  // Product states\n  const [isProductDialogOpen, setIsProductDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const [productFormData, setProductFormData] = useState<Partial<InsertProduct>>({});\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: categories, isLoading: categoriesLoading } = useQuery({\n    queryKey: ['/api/categories'],\n    queryFn: () => apiGet('/api/categories'),\n  });\n\n  const { data: products, isLoading: productsLoading } = useQuery({\n    queryKey: ['/api/products'],\n    queryFn: () => apiGet('/api/products'),\n  });\n\n  // Category mutations\n  const createCategoryMutation = useMutation({\n    mutationFn: (data: InsertCategory) => apiPost('/api/categories', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      setIsCategoryDialogOpen(false);\n      setCategoryFormData({});\n      toast({ title: \"تم إضافة الفئة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في إضافة الفئة\" });\n    },\n  });\n\n  const updateCategoryMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertCategory> }) => \n      apiPut(`/api/categories/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      setEditingCategory(null);\n      setCategoryFormData({});\n      toast({ title: \"تم تحديث الفئة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث الفئة\" });\n    },\n  });\n\n  const deleteCategoryMutation = useMutation({\n    mutationFn: (id: string) => apiDelete(`/api/categories/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      toast({ title: \"تم حذف الفئة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف الفئة\" });\n    },\n  });\n\n  // Product mutations\n  const createProductMutation = useMutation({\n    mutationFn: (data: InsertProduct) => apiPost('/api/products', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsProductDialogOpen(false);\n      setProductFormData({});\n      toast({ title: \"تم إضافة المنتج بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في إضافة المنتج\" });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertProduct> }) => \n      apiPut(`/api/products/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setEditingProduct(null);\n      setProductFormData({});\n      toast({ title: \"تم تحديث المنتج بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث المنتج\" });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: (id: string) => apiDelete(`/api/products/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      toast({ title: \"تم حذف المنتج بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف المنتج\" });\n    },\n  });\n\n  // Handlers\n  const handleCategorySubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingCategory) {\n      updateCategoryMutation.mutate({ id: editingCategory.id, data: categoryFormData });\n    } else {\n      createCategoryMutation.mutate(categoryFormData as InsertCategory);\n    }\n  };\n\n  const handleProductSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, data: productFormData });\n    } else {\n      createProductMutation.mutate(productFormData as InsertProduct);\n    }\n  };\n\n  const handleCategoryEdit = (category: Category) => {\n    setEditingCategory(category);\n    setCategoryFormData(category);\n    setIsCategoryDialogOpen(true);\n  };\n\n  const handleProductEdit = (product: Product) => {\n    setEditingProduct(product);\n    setProductFormData(product);\n    setIsProductDialogOpen(true);\n  };\n\n  const handleCategoryDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذه الفئة؟\")) {\n      deleteCategoryMutation.mutate(id);\n    }\n  };\n\n  const handleProductDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا المنتج؟\")) {\n      deleteProductMutation.mutate(id);\n    }\n  };\n\n  const filteredCategories = categories?.filter((category: Category) => \n    category.name?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const filteredProducts = products?.filter((product: Product) => {\n    const matchesSearch = product.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.model?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = categoryFilter === \"all\" || product.categoryId === categoryFilter;\n    return matchesSearch && matchesCategory;\n  }) || [];\n\n  return (\n    <div>\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">الفئات والمنتجات</h1>\n          <p className=\"text-muted-foreground\">إدارة فئات المنتجات والمنتجات المختلفة</p>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"categories\">الفئات</TabsTrigger>\n          <TabsTrigger value=\"products\">المنتجات</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"categories\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4 space-x-reverse\">\n                <Input\n                  placeholder=\"البحث في الفئات...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"text-right max-w-sm\"\n                  data-testid=\"input-search-categories\"\n                />\n              </div>\n              <Dialog open={isCategoryDialogOpen} onOpenChange={setIsCategoryDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    className=\"flex items-center space-x-2 space-x-reverse\"\n                    onClick={() => {\n                      setEditingCategory(null);\n                      setCategoryFormData({});\n                    }}\n                    data-testid=\"button-add-category\"\n                  >\n                    <i className=\"bi bi-plus-circle\"></i>\n                    <span>إضافة فئة</span>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>{editingCategory ? \"تعديل الفئة\" : \"إضافة فئة جديدة\"}</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleCategorySubmit} className=\"space-y-4\">\n                    <div>\n                      <Label>اسم الفئة</Label>\n                      <Input\n                        value={categoryFormData.name || \"\"}\n                        onChange={(e) => setCategoryFormData({ ...categoryFormData, name: e.target.value })}\n                        required\n                        className=\"text-right\"\n                        data-testid=\"input-category-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label>وصف الفئة</Label>\n                      <Textarea\n                        value={categoryFormData.description || \"\"}\n                        onChange={(e) => setCategoryFormData({ ...categoryFormData, description: e.target.value })}\n                        className=\"text-right resize-none\"\n                        rows={3}\n                        data-testid=\"textarea-category-description\"\n                      />\n                    </div>\n                    <Button type=\"submit\" className=\"w-full\" data-testid=\"button-save-category\">\n                      {editingCategory ? \"تحديث\" : \"إضافة\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {categoriesLoading ? (\n                <div className=\"col-span-full text-center py-8\">\n                  <div className=\"loading-spinner mx-auto\"></div>\n                </div>\n              ) : filteredCategories.length === 0 ? (\n                <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                  لا توجد فئات\n                </div>\n              ) : (\n                filteredCategories.map((category: Category) => (\n                  <Card key={category.id} className=\"hover-scale\" data-testid={`card-category-${category.id}`}>\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3 space-x-reverse\">\n                          <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                            <i className=\"bi bi-diagram-3 text-chart-1\"></i>\n                          </div>\n                          <CardTitle className=\"text-lg\">{category.name}</CardTitle>\n                        </div>\n                        <div className=\"flex items-center space-x-2 space-x-reverse\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleCategoryEdit(category)}\n                            className=\"p-2 text-chart-1 hover:bg-chart-1/10\"\n                            data-testid={`button-edit-category-${category.id}`}\n                          >\n                            <i className=\"bi bi-pencil text-sm\"></i>\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleCategoryDelete(category.id)}\n                            className=\"p-2 text-destructive hover:bg-destructive/10\"\n                            data-testid={`button-delete-category-${category.id}`}\n                          >\n                            <i className=\"bi bi-trash text-sm\"></i>\n                          </Button>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-muted-foreground text-sm\">\n                        {category.description || 'لا يوجد وصف'}\n                      </p>\n                      <div className=\"mt-3 text-xs text-muted-foreground\">\n                        المنتجات: {products?.filter((p: Product) => p.categoryId === category.id).length || 0}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"products\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4 space-x-reverse\">\n                <Input\n                  placeholder=\"البحث في المنتجات...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"text-right max-w-sm\"\n                  data-testid=\"input-search-products\"\n                />\n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-filter-category\">\n                    <SelectValue placeholder=\"فلترة بالفئة\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">جميع الفئات</SelectItem>\n                    {categories?.map((category: Category) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <Dialog open={isProductDialogOpen} onOpenChange={setIsProductDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    className=\"flex items-center space-x-2 space-x-reverse\"\n                    onClick={() => {\n                      setEditingProduct(null);\n                      setProductFormData({});\n                    }}\n                    data-testid=\"button-add-product\"\n                  >\n                    <i className=\"bi bi-plus-circle\"></i>\n                    <span>إضافة منتج</span>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>{editingProduct ? \"تعديل المنتج\" : \"إضافة منتج جديد\"}</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleProductSubmit} className=\"space-y-4\">\n                    <div>\n                      <Label>اسم المنتج</Label>\n                      <Input\n                        value={productFormData.name || \"\"}\n                        onChange={(e) => setProductFormData({ ...productFormData, name: e.target.value })}\n                        required\n                        className=\"text-right\"\n                        data-testid=\"input-product-name\"\n                      />\n                    </div>\n                    <div>\n                      <Label>رقم الموديل</Label>\n                      <Input\n                        value={productFormData.model || \"\"}\n                        onChange={(e) => setProductFormData({ ...productFormData, model: e.target.value })}\n                        className=\"text-right\"\n                        data-testid=\"input-product-model\"\n                      />\n                    </div>\n                    <div>\n                      <Label>الفئة</Label>\n                      <Select value={productFormData.categoryId || \"\"} onValueChange={(value) => setProductFormData({ ...productFormData, categoryId: value })}>\n                        <SelectTrigger data-testid=\"select-product-category\">\n                          <SelectValue placeholder=\"اختر الفئة\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {categories?.map((category: Category) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label>وصف المنتج</Label>\n                      <Textarea\n                        value={productFormData.description || \"\"}\n                        onChange={(e) => setProductFormData({ ...productFormData, description: e.target.value })}\n                        className=\"text-right resize-none\"\n                        rows={3}\n                        data-testid=\"textarea-product-description\"\n                      />\n                    </div>\n                    <Button type=\"submit\" className=\"w-full\" data-testid=\"button-save-product\">\n                      {editingProduct ? \"تحديث\" : \"إضافة\"}\n                    </Button>\n                  </form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <Card>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">اسم المنتج</th>\n                      <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الموديل</th>\n                      <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الفئة</th>\n                      <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الوصف</th>\n                      <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الإجراءات</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"divide-y divide-border\">\n                    {productsLoading ? (\n                      <tr>\n                        <td colSpan={5} className=\"text-center py-8\">\n                          <div className=\"loading-spinner mx-auto\"></div>\n                        </td>\n                      </tr>\n                    ) : filteredProducts.length === 0 ? (\n                      <tr>\n                        <td colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                          لا توجد منتجات\n                        </td>\n                      </tr>\n                    ) : (\n                      filteredProducts.map((product: Product) => (\n                        <tr key={product.id} className=\"hover:bg-muted/50\" data-testid={`row-product-${product.id}`}>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex items-center space-x-3 space-x-reverse\">\n                              <div className=\"w-8 h-8 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                                <i className=\"bi bi-box text-chart-2 text-sm\"></i>\n                              </div>\n                              <span className=\"font-medium text-card-foreground\">{product.name}</span>\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4 text-card-foreground\">{product.model || 'غير محدد'}</td>\n                          <td className=\"py-4 px-4 text-card-foreground\">\n                            {categories?.find((c: Category) => c.id === product.categoryId)?.name || 'غير محدد'}\n                          </td>\n                          <td className=\"py-4 px-4 text-card-foreground max-w-xs truncate\">\n                            {product.description || 'لا يوجد وصف'}\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex items-center space-x-2 space-x-reverse\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleProductEdit(product)}\n                                className=\"p-2 text-chart-1 hover:bg-chart-1/10\"\n                                data-testid={`button-edit-product-${product.id}`}\n                              >\n                                <i className=\"bi bi-pencil text-sm\"></i>\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleProductDelete(product.id)}\n                                className=\"p-2 text-destructive hover:bg-destructive/10\"\n                                data-testid={`button-delete-product-${product.id}`}\n                              >\n                                <i className=\"bi bi-trash text-sm\"></i>\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":22062},"client/src/pages/centers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiGet, apiPost, apiPut, apiDelete } from \"../lib/db\";\nimport type { ServiceCenter, InsertServiceCenter } from \"@shared/schema\";\n\nexport default function Centers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingCenter, setEditingCenter] = useState<ServiceCenter | null>(null);\n  const [formData, setFormData] = useState<Partial<InsertServiceCenter>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: centers, isLoading } = useQuery({\n    queryKey: ['/api/service-centers'],\n    queryFn: () => apiGet('/api/service-centers'),\n  });\n\n  const { data: users } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: () => apiGet('/api/users'),\n  });\n\n  const createCenterMutation = useMutation({\n    mutationFn: (data: InsertServiceCenter) => apiPost('/api/service-centers', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-centers'] });\n      setIsAddDialogOpen(false);\n      setFormData({});\n      toast({ title: \"تم إضافة مركز الخدمة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في إضافة مركز الخدمة\" });\n    },\n  });\n\n  const updateCenterMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertServiceCenter> }) => \n      apiPut(`/api/service-centers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-centers'] });\n      setEditingCenter(null);\n      setFormData({});\n      toast({ title: \"تم تحديث مركز الخدمة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث مركز الخدمة\" });\n    },\n  });\n\n  const deleteCenterMutation = useMutation({\n    mutationFn: (id: string) => apiDelete(`/api/service-centers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-centers'] });\n      toast({ title: \"تم حذف مركز الخدمة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف مركز الخدمة\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingCenter) {\n      updateCenterMutation.mutate({ id: editingCenter.id, data: formData });\n    } else {\n      createCenterMutation.mutate(formData as InsertServiceCenter);\n    }\n  };\n\n  const handleEdit = (center: ServiceCenter) => {\n    setEditingCenter(center);\n    setFormData(center);\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا المركز؟\")) {\n      deleteCenterMutation.mutate(id);\n    }\n  };\n\n  const filteredCenters = centers?.filter((center: ServiceCenter) => {\n    const matchesSearch = center.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         center.address?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"active\" && center.isActive) ||\n                         (statusFilter === \"inactive\" && !center.isActive);\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const managers = users?.filter((user: any) => user.role === 'manager') || [];\n\n  return (\n    <div>\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">مراكز الخدمة</h1>\n          <p className=\"text-muted-foreground\">إدارة مراكز الخدمة والفروع</p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"flex items-center space-x-2 space-x-reverse\"\n              onClick={() => {\n                setEditingCenter(null);\n                setFormData({});\n              }}\n              data-testid=\"button-add-center\"\n            >\n              <i className=\"bi bi-plus-circle\"></i>\n              <span>إضافة مركز</span>\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{editingCenter ? \"تعديل مركز الخدمة\" : \"إضافة مركز جديد\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label>اسم المركز</Label>\n                <Input\n                  value={formData.name || \"\"}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-center-name\"\n                />\n              </div>\n              <div>\n                <Label>العنوان</Label>\n                <Input\n                  value={formData.address || \"\"}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-center-address\"\n                />\n              </div>\n              <div>\n                <Label>رقم الهاتف</Label>\n                <Input\n                  value={formData.phone || \"\"}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  className=\"text-right\"\n                  data-testid=\"input-center-phone\"\n                />\n              </div>\n              <div>\n                <Label>البريد الإلكتروني</Label>\n                <Input\n                  type=\"email\"\n                  value={formData.email || \"\"}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"text-right\"\n                  data-testid=\"input-center-email\"\n                />\n              </div>\n              <div>\n                <Label>المدير</Label>\n                <Select value={formData.managerId || \"\"} onValueChange={(value) => setFormData({ ...formData, managerId: value })}>\n                  <SelectTrigger data-testid=\"select-center-manager\">\n                    <SelectValue placeholder=\"اختر المدير\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {managers.map((manager: any) => (\n                      <SelectItem key={manager.id} value={manager.id}>\n                        {manager.fullName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"flex items-center space-x-2 space-x-reverse\">\n                <Switch\n                  checked={formData.isActive ?? true}\n                  onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n                  data-testid=\"switch-center-active\"\n                />\n                <Label>نشط</Label>\n              </div>\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-save-center\">\n                {editingCenter ? \"تحديث\" : \"إضافة\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">البحث</Label>\n              <Input\n                placeholder=\"البحث بالاسم أو العنوان...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"text-right\"\n                data-testid=\"input-search-centers\"\n              />\n            </div>\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">الحالة</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"select-filter-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">جميع الحالات</SelectItem>\n                  <SelectItem value=\"active\">نشط</SelectItem>\n                  <SelectItem value=\"inactive\">غير نشط</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted\">\n              <tr>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">اسم المركز</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">العنوان</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الهاتف</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">المدير</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الحالة</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الإجراءات</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {isLoading ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8\">\n                    <div className=\"loading-spinner mx-auto\"></div>\n                  </td>\n                </tr>\n              ) : filteredCenters.length === 0 ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                    لا توجد مراكز خدمة\n                  </td>\n                </tr>\n              ) : (\n                filteredCenters.map((center: ServiceCenter) => (\n                  <tr key={center.id} className=\"hover:bg-muted/50\" data-testid={`row-center-${center.id}`}>\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-building text-chart-1\"></i>\n                        </div>\n                        <span className=\"font-medium text-card-foreground\">{center.name}</span>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-4 text-card-foreground\">{center.address}</td>\n                    <td className=\"py-4 px-4 text-card-foreground\">{center.phone}</td>\n                    <td className=\"py-4 px-4 text-card-foreground\">\n                      {managers.find((m: any) => m.id === center.managerId)?.fullName || 'غير محدد'}\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <span className={`status-badge ${center.isActive ? 'status-completed' : 'status-cancelled'}`}>\n                        {center.isActive ? 'نشط' : 'غير نشط'}\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(center)}\n                          className=\"p-2 text-chart-1 hover:bg-chart-1/10\"\n                          data-testid={`button-edit-center-${center.id}`}\n                        >\n                          <i className=\"bi bi-pencil text-sm\"></i>\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(center.id)}\n                          className=\"p-2 text-destructive hover:bg-destructive/10\"\n                          data-testid={`button-delete-center-${center.id}`}\n                        >\n                          <i className=\"bi bi-trash text-sm\"></i>\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13490},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiGet, apiPost, apiPut, apiDelete } from \"../lib/db\";\nimport type { Customer, InsertCustomer } from \"@shared/schema\";\n\nexport default function Customers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  const [formData, setFormData] = useState<Partial<InsertCustomer>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: customers, isLoading } = useQuery({\n    queryKey: ['/api/customers'],\n    queryFn: () => apiGet('/api/customers'),\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: (data: InsertCustomer) => apiPost('/api/customers', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      setIsAddDialogOpen(false);\n      setFormData({});\n      toast({ title: \"تم إضافة العميل بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في إضافة العميل\" });\n    },\n  });\n\n  const updateCustomerMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertCustomer> }) => \n      apiPut(`/api/customers/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      setEditingCustomer(null);\n      setFormData({});\n      toast({ title: \"تم تحديث العميل بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث العميل\" });\n    },\n  });\n\n  const deleteCustomerMutation = useMutation({\n    mutationFn: (id: string) => apiDelete(`/api/customers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      toast({ title: \"تم حذف العميل بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف العميل\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingCustomer) {\n      updateCustomerMutation.mutate({ id: editingCustomer.id, data: formData });\n    } else {\n      createCustomerMutation.mutate(formData as InsertCustomer);\n    }\n  };\n\n  const handleEdit = (customer: Customer) => {\n    setEditingCustomer(customer);\n    setFormData(customer);\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا العميل؟\")) {\n      deleteCustomerMutation.mutate(id);\n    }\n  };\n\n  const filteredCustomers = customers?.filter((customer: Customer) => {\n    const matchesSearch = customer.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         customer.phone?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         customer.email?.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  }) || [];\n\n  return (\n    <div>\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">العملاء</h1>\n          <p className=\"text-muted-foreground\">إدارة بيانات العملاء والاتصال بهم</p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"flex items-center space-x-2 space-x-reverse\"\n              onClick={() => {\n                setEditingCustomer(null);\n                setFormData({});\n              }}\n              data-testid=\"button-add-customer\"\n            >\n              <i className=\"bi bi-plus-circle\"></i>\n              <span>إضافة عميل</span>\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{editingCustomer ? \"تعديل العميل\" : \"إضافة عميل جديد\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label>الاسم بالكامل</Label>\n                <Input\n                  value={formData.fullName || \"\"}\n                  onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-customer-name\"\n                />\n              </div>\n              <div>\n                <Label>رقم الهاتف</Label>\n                <Input\n                  type=\"tel\"\n                  value={formData.phone || \"\"}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-customer-phone\"\n                />\n              </div>\n              <div>\n                <Label>البريد الإلكتروني</Label>\n                <Input\n                  type=\"email\"\n                  value={formData.email || \"\"}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  className=\"text-right\"\n                  data-testid=\"input-customer-email\"\n                />\n              </div>\n              <div>\n                <Label>العنوان</Label>\n                <Textarea\n                  value={formData.address || \"\"}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  className=\"text-right resize-none\"\n                  rows={3}\n                  data-testid=\"textarea-customer-address\"\n                />\n              </div>\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-save-customer\">\n                {editingCustomer ? \"تحديث\" : \"إضافة\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 gap-4\">\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">البحث</Label>\n              <Input\n                placeholder=\"البحث بالاسم أو الهاتف أو البريد الإلكتروني...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"text-right\"\n                data-testid=\"input-search-customers\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-3 space-x-reverse\">\n            <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n              <i className=\"bi bi-people text-chart-1\"></i>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">إجمالي العملاء</p>\n              <p className=\"text-xl font-bold text-card-foreground\">\n                {customers?.length || 0}\n              </p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-3 space-x-reverse\">\n            <div className=\"w-10 h-10 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n              <i className=\"bi bi-person-plus text-chart-2\"></i>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">عملاء جدد هذا الشهر</p>\n              <p className=\"text-xl font-bold text-card-foreground\">\n                {customers?.filter((c: Customer) => {\n                  const createdAt = new Date(c.createdAt || '');\n                  const now = new Date();\n                  const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n                  return createdAt >= thisMonth;\n                }).length || 0}\n              </p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-3 space-x-reverse\">\n            <div className=\"w-10 h-10 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n              <i className=\"bi bi-envelope text-chart-3\"></i>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">عملاء بـ بريد إلكتروني</p>\n              <p className=\"text-xl font-bold text-card-foreground\">\n                {customers?.filter((c: Customer) => c.email).length || 0}\n              </p>\n            </div>\n          </div>\n        </Card>\n      </div>\n      \n      <Card>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted\">\n              <tr>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الاسم</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الهاتف</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">البريد الإلكتروني</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">العنوان</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">تاريخ الإضافة</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الإجراءات</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {isLoading ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8\">\n                    <div className=\"loading-spinner mx-auto\"></div>\n                  </td>\n                </tr>\n              ) : filteredCustomers.length === 0 ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                    لا توجد عملاء\n                  </td>\n                </tr>\n              ) : (\n                filteredCustomers.map((customer: Customer) => (\n                  <tr key={customer.id} className=\"hover:bg-muted/50\" data-testid={`row-customer-${customer.id}`}>\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-medium text-primary\">\n                            {customer.fullName?.charAt(0) || 'ع'}\n                          </span>\n                        </div>\n                        <span className=\"font-medium text-card-foreground\">{customer.fullName}</span>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-4 text-card-foreground\">{customer.phone}</td>\n                    <td className=\"py-4 px-4 text-card-foreground\">{customer.email || 'غير متوفر'}</td>\n                    <td className=\"py-4 px-4 text-card-foreground\">{customer.address || 'غير محدد'}</td>\n                    <td className=\"py-4 px-4 text-muted-foreground text-sm\">\n                      {customer.createdAt ? new Date(customer.createdAt).toLocaleDateString('ar-EG') : ''}\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(customer)}\n                          className=\"p-2 text-chart-1 hover:bg-chart-1/10\"\n                          data-testid={`button-edit-customer-${customer.id}`}\n                        >\n                          <i className=\"bi bi-pencil text-sm\"></i>\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(customer.id)}\n                          className=\"p-2 text-destructive hover:bg-destructive/10\"\n                          data-testid={`button-delete-customer-${customer.id}`}\n                        >\n                          <i className=\"bi bi-trash text-sm\"></i>\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13443},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { apiGet } from \"../lib/db\";\nimport { useAuth } from \"../lib/auth\";\nimport { canAccessPage } from \"../lib/permissions\";\n\nexport default function Dashboard() {\n  const { user: currentUser } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect customers away from dashboard\n  useEffect(() => {\n    if (currentUser && !canAccessPage(currentUser.role, 'dashboard')) {\n      setLocation('/dashboard/service-requests');\n    }\n  }, [currentUser, setLocation]);\n  \n  const { data: stats } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    queryFn: () => apiGet('/api/dashboard/stats'),\n  });\n\n  const { data: recentRequests } = useQuery({\n    queryKey: ['/api/dashboard/recent-requests'],\n    queryFn: () => apiGet('/api/dashboard/recent-requests'),\n  });\n\n  const { data: recentActivities } = useQuery({\n    queryKey: ['/api/dashboard/recent-activities'],\n    queryFn: () => apiGet('/api/dashboard/recent-activities'),\n  });\n\n  const { data: userCenter } = useQuery({\n    queryKey: ['/api/service-centers', currentUser?.centerId],\n    queryFn: () => currentUser?.centerId ? apiGet(`/api/service-centers/${currentUser.centerId}`) : Promise.resolve(null),\n    enabled: !!currentUser?.centerId,\n  });\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">لوحة التحكم</h1>\n        <p className=\"text-muted-foreground\">\n          {currentUser?.role === 'technician' ? 'نظرة عامة على مهامك وإنجازاتك' : \n           currentUser?.role === 'manager' ? `نظرة عامة على أداء ${userCenter?.name || 'مركزك'}` : 'نظرة عامة على أداء النظام'}\n        </p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {currentUser?.role === 'technician' ? (\n          <>\n            <Card className=\"hover-scale\" data-testid=\"card-total-requests\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">إجمالي طلباتي</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.totalRequests || 0}</p>\n                    <p className=\"text-xs text-chart-2 mt-1\">كل الطلبات المسندة إليك</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-clipboard-check text-xl text-chart-1\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover-scale\" data-testid=\"card-pending-requests\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">في الانتظار</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.pendingRequests || 0}</p>\n                    <p className=\"text-xs text-orange-500 mt-1\">بحاجة للبدء</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-clock-history text-xl text-orange-500\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover-scale\" data-testid=\"card-in-progress-requests\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">قيد التنفيذ</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.inProgressRequests || 0}</p>\n                    <p className=\"text-xs text-blue-500 mt-1\">العمل جارٍ عليها</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-gear-fill text-xl text-blue-500\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover-scale\" data-testid=\"card-completed-requests\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">مكتملة</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.completedRequests || 0}</p>\n                    <p className=\"text-xs text-green-500 mt-1\">تم إنجازها بنجاح</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-check-circle-fill text-xl text-green-500\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </>\n        ) : currentUser?.role === 'manager' ? (\n          <>\n            <Card className=\"hover-scale\" data-testid=\"card-center-users\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">مستخدمي المركز</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.totalUsers || 0}</p>\n                    <p className=\"text-xs text-chart-2 mt-1\">الموظفين في مركزك</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-people text-xl text-chart-1\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover-scale\" data-testid=\"card-center-requests\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">طلبات المركز</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.serviceRequests || 0}</p>\n                    <p className=\"text-xs text-chart-3 mt-1\">كل طلبات الصيانة</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-tools text-xl text-chart-2\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover-scale\" data-testid=\"card-center-only\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">مركز الخدمة</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.serviceCenters || 1}</p>\n                    <p className=\"text-xs text-chart-4 mt-1\">مركزك فقط</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-building text-xl text-chart-3\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover-scale\" data-testid=\"card-center-revenue\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">إيرادات المركز</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.revenue || 0} ج.م</p>\n                    <p className=\"text-xs text-chart-5 mt-1\">من طلبات مركزك</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-currency-dollar text-xl text-chart-4\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </>\n        ) : (\n          <>\n            <Card className=\"hover-scale\" data-testid=\"card-total-users\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">إجمالي المستخدمين</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.totalUsers || 0}</p>\n                    <p className=\"text-xs text-chart-2 mt-1\">+12% من الشهر الماضي</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-people text-xl text-chart-1\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover-scale\" data-testid=\"card-service-requests\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">طلبات الصيانة</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.serviceRequests || 0}</p>\n                    <p className=\"text-xs text-chart-3 mt-1\">+5% من الشهر الماضي</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-tools text-xl text-chart-2\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover-scale\" data-testid=\"card-service-centers\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">مراكز الخدمة</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.serviceCenters || 0}</p>\n                    <p className=\"text-xs text-chart-4 mt-1\">+2 مراكز جديدة</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-building text-xl text-chart-3\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"hover-scale\" data-testid=\"card-revenue\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">الإيرادات</p>\n                    <p className=\"text-2xl font-bold text-card-foreground\">{stats?.revenue || 0} ج.م</p>\n                    <p className=\"text-xs text-chart-5 mt-1\">+18% من الشهر الماضي</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                    <i className=\"bi bi-currency-dollar text-xl text-chart-4\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </>\n        )}\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <Card data-testid=\"card-recent-requests\">\n          <CardHeader>\n            <CardTitle>\n              {currentUser?.role === 'technician' ? 'طلبات الصيانة المسندة إليك' : \n               currentUser?.role === 'manager' ? 'أحدث طلبات الصيانة في مركزك' : 'أحدث طلبات الصيانة'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentRequests?.length ? recentRequests.map((request: any) => (\n                <div key={request.id} className=\"flex items-center justify-between p-4 bg-muted rounded-lg\">\n                  <div className=\"flex items-center space-x-4 space-x-reverse\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                      <i className=\"bi bi-tools text-primary\"></i>\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-card-foreground\">{request.deviceName}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {request.requestNumber} - {request.customerName || 'عميل'}\n                      </p>\n                    </div>\n                  </div>\n                  <span className={`status-badge status-${request.status}`}>\n                    {request.status === 'pending' ? 'في الانتظار' : \n                     request.status === 'in_progress' ? 'قيد التنفيذ' : \n                     request.status === 'completed' ? 'مكتمل' : 'ملغي'}\n                  </span>\n                </div>\n              )) : (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  {currentUser?.role === 'technician' ? 'لا توجد طلبات مسندة إليك' : 'لا توجد طلبات حديثة'}\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card data-testid=\"card-recent-activities\">\n          <CardHeader>\n            <CardTitle>\n              {currentUser?.role === 'technician' ? 'أنشطتك الأخيرة' : 'آخر الأنشطة'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentActivities?.length ? recentActivities.map((activity: any) => (\n                <div key={activity.id} className=\"flex items-start space-x-4 space-x-reverse\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2\"></div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm text-card-foreground\">{activity.description}</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">{activity.timestamp || new Date(activity.createdAt).toLocaleString('ar-EG')}</p>\n                  </div>\n                </div>\n              )) : (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  {currentUser?.role === 'technician' ? 'لا توجد أنشطة لك حتى الآن' : 'لا توجد أنشطة حديثة'}\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15599},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { apiGet } from \"../lib/db\";\nimport { format, subDays, startOfMonth, endOfMonth, subMonths } from \"date-fns\";\nimport { ar } from \"date-fns/locale\";\n\nconst reportTypes = [\n  { key: 'service-requests', name: 'تقارير طلبات الصيانة', icon: 'bi-tools' },\n  { key: 'users', name: 'تقارير المستخدمين', icon: 'bi-people' },\n  { key: 'centers', name: 'تقارير المراكز', icon: 'bi-building' },\n  { key: 'customers', name: 'تقارير العملاء', icon: 'bi-person-badge' },\n  { key: 'financial', name: 'التقارير المالية', icon: 'bi-currency-dollar' },\n];\n\nconst dateRanges = [\n  { key: 'today', name: 'اليوم' },\n  { key: 'yesterday', name: 'أمس' },\n  { key: 'last-7-days', name: 'آخر 7 أيام' },\n  { key: 'last-30-days', name: 'آخر 30 يوم' },\n  { key: 'this-month', name: 'هذا الشهر' },\n  { key: 'last-month', name: 'الشهر الماضي' },\n  { key: 'custom', name: 'نطاق مخصص' },\n];\n\nexport default function Reports() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [selectedReport, setSelectedReport] = useState(\"service-requests\");\n  const [dateRange, setDateRange] = useState(\"last-30-days\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n\n  const { data: serviceRequests } = useQuery({\n    queryKey: ['/api/service-requests'],\n    queryFn: () => apiGet('/api/service-requests'),\n  });\n\n  const { data: users } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: () => apiGet('/api/users'),\n  });\n\n  const { data: centers } = useQuery({\n    queryKey: ['/api/service-centers'],\n    queryFn: () => apiGet('/api/service-centers'),\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: ['/api/customers'],\n    queryFn: () => apiGet('/api/customers'),\n  });\n\n  const getDateRange = () => {\n    const now = new Date();\n    switch (dateRange) {\n      case 'today':\n        return { start: now, end: now };\n      case 'yesterday':\n        const yesterday = subDays(now, 1);\n        return { start: yesterday, end: yesterday };\n      case 'last-7-days':\n        return { start: subDays(now, 7), end: now };\n      case 'last-30-days':\n        return { start: subDays(now, 30), end: now };\n      case 'this-month':\n        return { start: startOfMonth(now), end: endOfMonth(now) };\n      case 'last-month':\n        const lastMonth = subMonths(now, 1);\n        return { start: startOfMonth(lastMonth), end: endOfMonth(lastMonth) };\n      case 'custom':\n        return { start: new Date(startDate), end: new Date(endDate) };\n      default:\n        return { start: subDays(now, 30), end: now };\n    }\n  };\n\n  const getServiceRequestsStats = () => {\n    if (!serviceRequests) return {};\n    \n    const { start, end } = getDateRange();\n    const filteredRequests = serviceRequests.filter((req: any) => {\n      const createdAt = new Date(req.createdAt);\n      return createdAt >= start && createdAt <= end;\n    });\n\n    const statusCounts = filteredRequests.reduce((acc: any, req: any) => {\n      acc[req.status] = (acc[req.status] || 0) + 1;\n      return acc;\n    }, {});\n\n    const priorityCounts = filteredRequests.reduce((acc: any, req: any) => {\n      acc[req.priority] = (acc[req.priority] || 0) + 1;\n      return acc;\n    }, {});\n\n    return {\n      total: filteredRequests.length,\n      statusCounts,\n      priorityCounts,\n      averageCompletionTime: 0, // Calculate based on actual data\n      customerSatisfaction: 0,   // Calculate based on actual data\n    };\n  };\n\n  const getUsersStats = () => {\n    if (!users) return {};\n    \n    const { start, end } = getDateRange();\n    const filteredUsers = users.filter((user: any) => {\n      const createdAt = new Date(user.createdAt);\n      return createdAt >= start && createdAt <= end;\n    });\n\n    const roleCounts = filteredUsers.reduce((acc: any, user: any) => {\n      acc[user.role] = (acc[user.role] || 0) + 1;\n      return acc;\n    }, {});\n\n    const statusCounts = filteredUsers.reduce((acc: any, user: any) => {\n      acc[user.status] = (acc[user.status] || 0) + 1;\n      return acc;\n    }, {});\n\n    return {\n      total: filteredUsers.length,\n      roleCounts,\n      statusCounts,\n      newUsers: filteredUsers.length,\n    };\n  };\n\n  const exportReport = (format: 'pdf' | 'excel' | 'csv') => {\n    // Mock export functionality\n    const fileName = `${selectedReport}-${dateRange}-${format}`;\n    console.log(`Exporting ${fileName}`);\n    // In a real application, this would call an API endpoint\n  };\n\n  const serviceRequestsStats = getServiceRequestsStats();\n  const usersStats = getUsersStats();\n\n  return (\n    <div>\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">التقارير والإحصائيات</h1>\n          <p className=\"text-muted-foreground\">عرض وتحليل بيانات النظام وإنشاء التقارير</p>\n        </div>\n        <div className=\"flex items-center space-x-3 space-x-reverse\">\n          <Button variant=\"outline\" onClick={() => exportReport('pdf')} data-testid=\"button-export-pdf\">\n            <i className=\"bi bi-file-earmark-pdf mr-2\"></i>\n            تصدير PDF\n          </Button>\n          <Button variant=\"outline\" onClick={() => exportReport('excel')} data-testid=\"button-export-excel\">\n            <i className=\"bi bi-file-earmark-spreadsheet mr-2\"></i>\n            تصدير Excel\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8\">\n        <Card className=\"lg:col-span-1\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle>فلاتر التقرير</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label>نوع التقرير</Label>\n              <Select value={selectedReport} onValueChange={setSelectedReport}>\n                <SelectTrigger data-testid=\"select-report-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {reportTypes.map((report) => (\n                    <SelectItem key={report.key} value={report.key}>\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        <i className={`bi ${report.icon}`}></i>\n                        <span>{report.name}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label>الفترة الزمنية</Label>\n              <Select value={dateRange} onValueChange={setDateRange}>\n                <SelectTrigger data-testid=\"select-date-range\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {dateRanges.map((range) => (\n                    <SelectItem key={range.key} value={range.key}>\n                      {range.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {dateRange === 'custom' && (\n              <div className=\"space-y-3\">\n                <div>\n                  <Label>من تاريخ</Label>\n                  <Input\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => setStartDate(e.target.value)}\n                    data-testid=\"input-start-date\"\n                  />\n                </div>\n                <div>\n                  <Label>إلى تاريخ</Label>\n                  <Input\n                    type=\"date\"\n                    value={endDate}\n                    onChange={(e) => setEndDate(e.target.value)}\n                    data-testid=\"input-end-date\"\n                  />\n                </div>\n              </div>\n            )}\n\n            <Button className=\"w-full\" data-testid=\"button-generate-report\">\n              <i className=\"bi bi-graph-up mr-2\"></i>\n              إنشاء التقرير\n            </Button>\n          </CardContent>\n        </Card>\n\n        <div className=\"lg:col-span-3\">\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"overview\">نظرة عامة</TabsTrigger>\n              <TabsTrigger value=\"detailed\">التفاصيل</TabsTrigger>\n              <TabsTrigger value=\"charts\">الرسوم البيانية</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              {selectedReport === 'service-requests' && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-tools text-chart-1\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">إجمالي الطلبات</p>\n                          <p className=\"text-2xl font-bold\">{serviceRequestsStats.total || 0}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-check-circle text-chart-2\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">طلبات مكتملة</p>\n                          <p className=\"text-2xl font-bold\">{serviceRequestsStats.statusCounts?.completed || 0}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-clock text-chart-3\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">طلبات معلقة</p>\n                          <p className=\"text-2xl font-bold\">{serviceRequestsStats.statusCounts?.pending || 0}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-exclamation-triangle text-chart-4\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">طلبات عاجلة</p>\n                          <p className=\"text-2xl font-bold\">{serviceRequestsStats.priorityCounts?.high || 0}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {selectedReport === 'users' && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-people text-chart-1\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">إجمالي المستخدمين</p>\n                          <p className=\"text-2xl font-bold\">{users?.length || 0}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-person-plus text-chart-2\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">مستخدمون جدد</p>\n                          <p className=\"text-2xl font-bold\">{usersStats.newUsers || 0}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-check-circle text-chart-3\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">مستخدمون نشطون</p>\n                          <p className=\"text-2xl font-bold\">{usersStats.statusCounts?.active || 0}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-person-check text-chart-4\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">مديرو النظام</p>\n                          <p className=\"text-2xl font-bold\">{usersStats.roleCounts?.admin || 0}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>الأداء العام</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>معدل إكمال الطلبات</span>\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        <div className=\"w-20 bg-gray-200 rounded-full h-2 dark:bg-gray-700\">\n                          <div className=\"bg-chart-1 h-2 rounded-full\" style={{ width: '85%' }}></div>\n                        </div>\n                        <span className=\"text-sm font-medium\">85%</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span>رضا العملاء</span>\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        <div className=\"w-20 bg-gray-200 rounded-full h-2 dark:bg-gray-700\">\n                          <div className=\"bg-chart-2 h-2 rounded-full\" style={{ width: '92%' }}></div>\n                        </div>\n                        <span className=\"text-sm font-medium\">92%</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <span>متوسط وقت الاستجابة</span>\n                      <span className=\"text-sm font-medium\">2.3 ساعة</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"detailed\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>البيانات التفصيلية</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-muted\">\n                        <tr>\n                          <th className=\"text-right py-2 px-4 text-sm font-medium\">التاريخ</th>\n                          <th className=\"text-right py-2 px-4 text-sm font-medium\">النوع</th>\n                          <th className=\"text-right py-2 px-4 text-sm font-medium\">العدد</th>\n                          <th className=\"text-right py-2 px-4 text-sm font-medium\">الحالة</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"divide-y divide-border\">\n                        <tr>\n                          <td className=\"py-2 px-4 text-sm\">اليوم</td>\n                          <td className=\"py-2 px-4 text-sm\">طلبات صيانة</td>\n                          <td className=\"py-2 px-4 text-sm\">12</td>\n                          <td className=\"py-2 px-4 text-sm\">\n                            <span className=\"status-badge status-in-progress\">نشط</span>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"charts\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>الرسوم البيانية</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-20\">\n                    <i className=\"bi bi-bar-chart text-4xl text-muted-foreground mb-4\"></i>\n                    <p className=\"text-muted-foreground\">سيتم إضافة الرسوم البيانية التفاعلية قريباً</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":19463},"client/src/pages/roles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiGet, apiPost, apiPut, apiDelete } from \"../lib/db\";\n\nconst roleNames = {\n  admin: 'مدير النظام',\n  manager: 'مدير مركز',\n  technician: 'فني',\n  receptionist: 'موظف استقبال',\n  warehouse_manager: 'مدير مخزن',\n  customer: 'عميل'\n};\n\nconst permissions = [\n  { key: 'users_view', name: 'عرض المستخدمين' },\n  { key: 'users_create', name: 'إضافة مستخدم' },\n  { key: 'users_edit', name: 'تعديل مستخدم' },\n  { key: 'users_delete', name: 'حذف مستخدم' },\n  { key: 'centers_view', name: 'عرض المراكز' },\n  { key: 'centers_create', name: 'إضافة مركز' },\n  { key: 'centers_edit', name: 'تعديل مركز' },\n  { key: 'centers_delete', name: 'حذف مركز' },\n  { key: 'requests_view', name: 'عرض طلبات الصيانة' },\n  { key: 'requests_create', name: 'إضافة طلب صيانة' },\n  { key: 'requests_edit', name: 'تعديل طلب صيانة' },\n  { key: 'requests_delete', name: 'حذف طلب صيانة' },\n  { key: 'warehouses_view', name: 'عرض المخازن' },\n  { key: 'warehouses_create', name: 'إضافة مخزن' },\n  { key: 'warehouses_edit', name: 'تعديل مخزن' },\n  { key: 'warehouses_delete', name: 'حذف مخزن' },\n  { key: 'customers_view', name: 'عرض العملاء' },\n  { key: 'customers_create', name: 'إضافة عميل' },\n  { key: 'customers_edit', name: 'تعديل عميل' },\n  { key: 'customers_delete', name: 'حذف عميل' },\n  { key: 'reports_view', name: 'عرض التقارير' },\n  { key: 'activities_view', name: 'عرض سجل الأنشطة' },\n  { key: 'settings_view', name: 'عرض الإعدادات' },\n  { key: 'settings_edit', name: 'تعديل الإعدادات' }\n];\n\nconst defaultRolePermissions = {\n  admin: permissions.map(p => p.key),\n  manager: [\n    'users_view', 'users_create', 'users_edit',\n    'centers_view', 'centers_edit',\n    'requests_view', 'requests_create', 'requests_edit',\n    'warehouses_view', 'warehouses_create', 'warehouses_edit',\n    'customers_view', 'customers_create', 'customers_edit',\n    'reports_view', 'activities_view'\n  ],\n  technician: [\n    'requests_view', 'requests_edit',\n    'customers_view', 'customers_edit'\n  ],\n  receptionist: [\n    'requests_view', 'requests_create', 'requests_edit',\n    'customers_view', 'customers_create', 'customers_edit'\n  ],\n  warehouse_manager: [\n    'warehouses_view', 'warehouses_edit',\n    'requests_view'\n  ],\n  customer: ['requests_view']\n};\n\nexport default function Roles() {\n  const [selectedRole, setSelectedRole] = useState<string>(\"admin\");\n  const [rolePermissions, setRolePermissions] = useState<Record<string, string[]>>(defaultRolePermissions);\n  const [isEditingRole, setIsEditingRole] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: users, isLoading: usersLoading } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: () => apiGet('/api/users'),\n  });\n\n  const updateRolePermissions = useMutation({\n    mutationFn: ({ role, permissions }: { role: string; permissions: string[] }) =>\n      apiPost('/api/roles/permissions', { role, permissions }),\n    onSuccess: () => {\n      toast({ title: \"تم تحديث صلاحيات الدور بنجاح\" });\n      setIsEditingRole(false);\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث صلاحيات الدور\" });\n    },\n  });\n\n  const handlePermissionToggle = (permissionKey: string, checked: boolean) => {\n    setRolePermissions(prev => ({\n      ...prev,\n      [selectedRole]: checked\n        ? [...(prev[selectedRole] || []), permissionKey]\n        : (prev[selectedRole] || []).filter(p => p !== permissionKey)\n    }));\n  };\n\n  const handleSavePermissions = () => {\n    updateRolePermissions.mutate({\n      role: selectedRole,\n      permissions: rolePermissions[selectedRole] || []\n    });\n  };\n\n  const filteredUsers = users?.filter((user: any) => \n    user.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    user.email?.toLowerCase().includes(searchTerm.toLowerCase())\n  ) || [];\n\n  const usersByRole = Object.entries(roleNames).reduce((acc, [role, name]) => {\n    acc[role] = filteredUsers.filter((user: any) => user.role === role);\n    return acc;\n  }, {} as Record<string, any[]>);\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">الأدوار والصلاحيات</h1>\n        <p className=\"text-muted-foreground\">إدارة أدوار المستخدمين وصلاحياتهم في النظام</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Role Management */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>إدارة الصلاحيات</span>\n                <div className=\"flex items-center space-x-4 space-x-reverse\">\n                  <Select value={selectedRole} onValueChange={setSelectedRole}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(roleNames).map(([role, name]) => (\n                        <SelectItem key={role} value={role}>\n                          {name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  {isEditingRole && (\n                    <Button \n                      onClick={handleSavePermissions} \n                      size=\"sm\"\n                      data-testid=\"button-save-permissions\"\n                    >\n                      حفظ التغييرات\n                    </Button>\n                  )}\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {permissions.map((permission) => {\n                  const isChecked = rolePermissions[selectedRole]?.includes(permission.key) || false;\n                  return (\n                    <div key={permission.key} className=\"flex items-center justify-between p-3 rounded-lg border\">\n                      <Label className=\"text-sm\">{permission.name}</Label>\n                      <Switch\n                        checked={isChecked}\n                        onCheckedChange={(checked) => {\n                          handlePermissionToggle(permission.key, checked);\n                          setIsEditingRole(true);\n                        }}\n                        data-testid={`switch-permission-${permission.key}`}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Users by Role */}\n          <Card>\n            <CardHeader>\n              <CardTitle>المستخدمون حسب الأدوار</CardTitle>\n              <div className=\"flex items-center space-x-4 space-x-reverse\">\n                <Input\n                  placeholder=\"البحث في المستخدمين...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"text-right max-w-sm\"\n                  data-testid=\"input-search-users\"\n                />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-6\">\n                {Object.entries(roleNames).map(([role, roleName]) => (\n                  <div key={role} className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-semibold text-foreground flex items-center space-x-2 space-x-reverse\">\n                        <span>{roleName}</span>\n                        <span className=\"text-sm text-muted-foreground\">\n                          ({usersByRole[role]?.length || 0})\n                        </span>\n                      </h3>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {usersByRole[role]?.length > 0 ? (\n                        usersByRole[role].map((user: any) => (\n                          <div \n                            key={user.id} \n                            className=\"flex items-center space-x-3 space-x-reverse p-3 rounded-lg bg-muted/30 hover:bg-muted/50 transition-colors\"\n                            data-testid={`user-card-${user.id}`}\n                          >\n                            <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                              <span className=\"text-sm font-medium text-primary\">\n                                {user.fullName?.charAt(0) || 'م'}\n                              </span>\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"font-medium text-card-foreground truncate\">\n                                {user.fullName}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground truncate\">\n                                {user.email}\n                              </p>\n                            </div>\n                            <div className={`px-2 py-1 rounded-full text-xs font-medium ${\n                              user.status === 'active' \n                                ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300'\n                                : user.status === 'pending'\n                                ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300'\n                                : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'\n                            }`}>\n                              {user.status === 'active' ? 'نشط' \n                               : user.status === 'pending' ? 'معلق'\n                               : 'غير نشط'}\n                            </div>\n                          </div>\n                        ))\n                      ) : (\n                        <p className=\"text-muted-foreground text-sm col-span-full\">\n                          لا يوجد مستخدمون بهذا الدور\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Role Statistics */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>إحصائيات الأدوار</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {Object.entries(roleNames).map(([role, roleName], index) => {\n                const count = usersByRole[role]?.length || 0;\n                const chartColor = `chart-${(index % 5) + 1}`;\n                \n                return (\n                  <div key={role} className=\"flex items-center justify-between p-3 rounded-lg border\">\n                    <div className=\"flex items-center space-x-3 space-x-reverse\">\n                      <div className={`w-3 h-3 rounded-full bg-${chartColor}`}></div>\n                      <span className=\"font-medium\">{roleName}</span>\n                    </div>\n                    <span className=\"text-lg font-bold\">{count}</span>\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>الصلاحيات الحالية</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"text-sm font-medium text-muted-foreground\">\n                  الدور المحدد: {roleNames[selectedRole as keyof typeof roleNames]}\n                </div>\n                <div className=\"space-y-2\">\n                  {rolePermissions[selectedRole]?.length > 0 ? (\n                    rolePermissions[selectedRole].map(permissionKey => {\n                      const permission = permissions.find(p => p.key === permissionKey);\n                      return (\n                        <div key={permissionKey} className=\"flex items-center space-x-2 space-x-reverse text-sm\">\n                          <i className=\"bi bi-check-circle text-green-500\"></i>\n                          <span>{permission?.name}</span>\n                        </div>\n                      );\n                    })\n                  ) : (\n                    <p className=\"text-muted-foreground text-sm\">لا توجد صلاحيات محددة</p>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13850},"client/src/pages/service-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiGet, apiPost, apiPut, apiDelete } from \"../lib/db\";\nimport { useAuth } from \"../lib/auth\";\nimport { canCreate, canUpdate, canDelete } from \"../lib/permissions\";\nimport { StatusProgress, StatusBadge } from \"@/components/ui/status-progress\";\nimport type { ServiceRequest, InsertServiceRequest } from \"@shared/schema\";\n\nexport default function ServiceRequests() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [centerFilter, setCenterFilter] = useState(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingRequest, setEditingRequest] = useState<ServiceRequest | null>(null);\n  const [formData, setFormData] = useState<Partial<InsertServiceRequest>>({});\n  const [isFollowUpDialogOpen, setIsFollowUpDialogOpen] = useState(false);\n  const [selectedRequestForFollowUp, setSelectedRequestForFollowUp] = useState<ServiceRequest | null>(null);\n  const [followUpText, setFollowUpText] = useState(\"\");\n  const [newStatus, setNewStatus] = useState<string>(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user: currentUser } = useAuth();\n\n  // Check permissions\n  const canCreateRequests = currentUser ? canCreate(currentUser.role, 'serviceRequests') : false;\n  const canUpdateRequests = currentUser ? canUpdate(currentUser.role, 'serviceRequests') : false;\n  const canDeleteRequests = currentUser ? canDelete(currentUser.role, 'serviceRequests') : false;\n\n  const { data: serviceRequests, isLoading } = useQuery({\n    queryKey: ['/api/service-requests'],\n    queryFn: () => apiGet('/api/service-requests'),\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: ['/api/customers'],\n    queryFn: () => apiGet('/api/customers'),\n  });\n\n  const { data: centers } = useQuery({\n    queryKey: ['/api/service-centers'],\n    queryFn: () => apiGet('/api/service-centers'),\n  });\n\n  const { data: products } = useQuery({\n    queryKey: ['/api/products'],\n    queryFn: () => apiGet('/api/products'),\n  });\n\n  const createRequestMutation = useMutation({\n    mutationFn: (data: InsertServiceRequest) => apiPost('/api/service-requests', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-requests'] });\n      setIsAddDialogOpen(false);\n      setFormData({});\n      toast({ title: \"تم إضافة طلب الصيانة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في إضافة طلب الصيانة\" });\n    },\n  });\n\n  const updateRequestMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertServiceRequest> }) => \n      apiPut(`/api/service-requests/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-requests'] });\n      setEditingRequest(null);\n      setFormData({});\n      toast({ title: \"تم تحديث طلب الصيانة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث طلب الصيانة\" });\n    },\n  });\n\n  const deleteRequestMutation = useMutation({\n    mutationFn: (id: string) => apiDelete(`/api/service-requests/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-requests'] });\n      toast({ title: \"تم حذف طلب الصيانة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف طلب الصيانة\" });\n    },\n  });\n\n  const createFollowUpMutation = useMutation({\n    mutationFn: ({ requestId, followUpText, newStatus }: { requestId: string; followUpText: string; newStatus?: string }) => \n      apiPost(`/api/service-requests/${requestId}/follow-ups`, { followUpText, newStatus }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/service-requests'] });\n      setIsFollowUpDialogOpen(false);\n      setFollowUpText(\"\");\n      setNewStatus(\"\");\n      setSelectedRequestForFollowUp(null);\n      toast({ title: \"تم إضافة المتابعة بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في إضافة المتابعة\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingRequest) {\n      updateRequestMutation.mutate({ id: editingRequest.id, data: formData });\n    } else {\n      createRequestMutation.mutate(formData as InsertServiceRequest);\n    }\n  };\n\n  const handleEdit = (request: ServiceRequest) => {\n    setEditingRequest(request);\n    setFormData(request);\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا الطلب؟\")) {\n      deleteRequestMutation.mutate(id);\n    }\n  };\n\n  const handleAddFollowUp = (request: ServiceRequest) => {\n    setSelectedRequestForFollowUp(request);\n    setIsFollowUpDialogOpen(true);\n  };\n\n  const handleSubmitFollowUp = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (selectedRequestForFollowUp && followUpText.trim()) {\n      createFollowUpMutation.mutate({\n        requestId: selectedRequestForFollowUp.id,\n        followUpText: followUpText.trim(),\n        newStatus: newStatus || undefined\n      });\n    }\n  };\n\n  const filteredRequests = serviceRequests?.filter((request: ServiceRequest) => {\n    const matchesSearch = request.requestNumber?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         request.deviceName?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || request.status === statusFilter;\n    const matchesCenter = centerFilter === \"all\" || request.centerId === centerFilter;\n    return matchesSearch && matchesStatus && matchesCenter;\n  }) || [];\n\n  return (\n    <div>\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">\n            {currentUser?.role === 'customer' ? 'طلبات الصيانة الخاصة بي' : 'طلبات الصيانة'}\n          </h1>\n          <p className=\"text-muted-foreground\">\n            {currentUser?.role === 'customer' ? 'متابعة طلبات الصيانة الخاصة بك' : 'إدارة ومتابعة طلبات الصيانة'}\n          </p>\n        </div>\n        {canCreateRequests && currentUser?.role !== 'customer' && (\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button \n                className=\"flex items-center space-x-2 space-x-reverse\"\n                onClick={() => {\n                  setEditingRequest(null);\n                  setFormData({});\n                }}\n                data-testid=\"button-add-service-request\"\n              >\n                <i className=\"bi bi-plus-circle\"></i>\n                <span>طلب صيانة جديد</span>\n              </Button>\n            </DialogTrigger>\n          <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editingRequest ? \"تعديل طلب الصيانة\" : \"إضافة طلب صيانة جديد\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label>رقم الطلب</Label>\n                <Input\n                  value={formData.requestNumber || \"\"}\n                  onChange={(e) => setFormData({ ...formData, requestNumber: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-request-number\"\n                />\n              </div>\n              <div>\n                <Label>العميل</Label>\n                <Select value={formData.customerId || \"\"} onValueChange={(value) => setFormData({ ...formData, customerId: value })}>\n                  <SelectTrigger data-testid=\"select-customer\">\n                    <SelectValue placeholder=\"اختر العميل\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {customers?.map((customer: any) => (\n                      <SelectItem key={customer.id} value={customer.id}>\n                        {customer.fullName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>المنتج</Label>\n                <Select value={formData.productId || \"\"} onValueChange={(value) => setFormData({ ...formData, productId: value })}>\n                  <SelectTrigger data-testid=\"select-product\">\n                    <SelectValue placeholder=\"اختر المنتج\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {products?.map((product: any) => (\n                      <SelectItem key={product.id} value={product.id}>\n                        {product.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>اسم الجهاز</Label>\n                <Input\n                  value={formData.deviceName || \"\"}\n                  onChange={(e) => setFormData({ ...formData, deviceName: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-device-name\"\n                />\n              </div>\n              <div>\n                <Label>الموديل</Label>\n                <Input\n                  value={formData.model || \"\"}\n                  onChange={(e) => setFormData({ ...formData, model: e.target.value })}\n                  className=\"text-right\"\n                  data-testid=\"input-model\"\n                />\n              </div>\n              <div>\n                <Label>وصف المشكلة</Label>\n                <Textarea\n                  value={formData.issue || \"\"}\n                  onChange={(e) => setFormData({ ...formData, issue: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"textarea-issue\"\n                />\n              </div>\n              <div>\n                <Label>مركز الخدمة</Label>\n                <Select value={formData.centerId || \"\"} onValueChange={(value) => setFormData({ ...formData, centerId: value })}>\n                  <SelectTrigger data-testid=\"select-center\">\n                    <SelectValue placeholder=\"اختر مركز الخدمة\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {centers?.map((center: any) => (\n                      <SelectItem key={center.id} value={center.id}>\n                        {center.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>الحالة</Label>\n                <Select value={formData.status || \"\"} onValueChange={(value) => setFormData({ ...formData, status: value as any })}>\n                  <SelectTrigger data-testid=\"select-status\">\n                    <SelectValue placeholder=\"اختر الحالة\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">في الانتظار</SelectItem>\n                    <SelectItem value=\"in_progress\">قيد التنفيذ</SelectItem>\n                    <SelectItem value=\"completed\">مكتمل</SelectItem>\n                    <SelectItem value=\"cancelled\">ملغي</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-save-request\">\n                {editingRequest ? \"تحديث\" : \"إضافة\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n        )}\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-3 space-x-reverse\">\n            <div className=\"w-10 h-10 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n              <i className=\"bi bi-clock text-chart-3\"></i>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">في الانتظار</p>\n              <p className=\"text-xl font-bold text-card-foreground\">\n                {serviceRequests?.filter((r: ServiceRequest) => r.status === 'pending').length || 0}\n              </p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-3 space-x-reverse\">\n            <div className=\"w-10 h-10 bg-chart-1/10 rounded-lg flex items-center justify-center\">\n              <i className=\"bi bi-gear text-chart-1\"></i>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">قيد التنفيذ</p>\n              <p className=\"text-xl font-bold text-card-foreground\">\n                {serviceRequests?.filter((r: ServiceRequest) => r.status === 'in_progress').length || 0}\n              </p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-3 space-x-reverse\">\n            <div className=\"w-10 h-10 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n              <i className=\"bi bi-check-circle text-chart-2\"></i>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">مكتملة</p>\n              <p className=\"text-xl font-bold text-card-foreground\">\n                {serviceRequests?.filter((r: ServiceRequest) => r.status === 'completed').length || 0}\n              </p>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-3 space-x-reverse\">\n            <div className=\"w-10 h-10 bg-destructive/10 rounded-lg flex items-center justify-center\">\n              <i className=\"bi bi-x-circle text-destructive\"></i>\n            </div>\n            <div>\n              <p className=\"text-sm text-muted-foreground\">ملغية</p>\n              <p className=\"text-xl font-bold text-card-foreground\">\n                {serviceRequests?.filter((r: ServiceRequest) => r.status === 'cancelled').length || 0}\n              </p>\n            </div>\n          </div>\n        </Card>\n      </div>\n      \n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className={`grid grid-cols-1 gap-4 ${currentUser?.role === 'customer' ? 'md:grid-cols-3' : 'md:grid-cols-4'}`}>\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">البحث</Label>\n              <Input\n                placeholder=\"رقم الطلب أو اسم الجهاز...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"text-right\"\n                data-testid=\"input-search-requests\"\n              />\n            </div>\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">الحالة</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"select-filter-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">جميع الحالات</SelectItem>\n                  <SelectItem value=\"pending\">في الانتظار</SelectItem>\n                  <SelectItem value=\"in_progress\">قيد التنفيذ</SelectItem>\n                  <SelectItem value=\"completed\">مكتمل</SelectItem>\n                  <SelectItem value=\"cancelled\">ملغي</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            {currentUser?.role !== 'customer' && (\n              <div>\n                <Label className=\"block text-sm font-medium text-card-foreground mb-2\">مركز الخدمة</Label>\n                <Select value={centerFilter} onValueChange={setCenterFilter}>\n                  <SelectTrigger data-testid=\"select-filter-center\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">جميع المراكز</SelectItem>\n                    {centers?.map((center: any) => (\n                      <SelectItem key={center.id} value={center.id}>\n                        {center.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">التاريخ</Label>\n              <Input \n                type=\"date\" \n                className=\"text-right\"\n                data-testid=\"input-filter-date\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted\">\n              <tr>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">رقم الطلب</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الجهاز</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">المشكلة</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الحالة</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">التاريخ</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الإجراءات</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {isLoading ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8\">\n                    <div className=\"loading-spinner mx-auto\"></div>\n                  </td>\n                </tr>\n              ) : filteredRequests.length === 0 ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                    لا توجد طلبات صيانة\n                  </td>\n                </tr>\n              ) : (\n                filteredRequests.map((request: ServiceRequest) => (\n                  <tr key={request.id} className=\"hover:bg-muted/50\" data-testid={`row-request-${request.id}`}>\n                    <td className=\"py-4 px-4\">\n                      <span className=\"font-mono text-sm text-primary font-medium\">{request.requestNumber}</span>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <div>\n                        <p className=\"font-medium text-card-foreground\">{request.deviceName}</p>\n                        <p className=\"text-sm text-muted-foreground\">{request.model}</p>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <p className=\"text-sm text-card-foreground\">{request.issue}</p>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <StatusBadge status={request.status as any} animate={true} />\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {request.createdAt ? new Date(request.createdAt).toLocaleDateString('ar-EG') : ''}\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        {canUpdateRequests && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(request)}\n                            className=\"p-2 text-chart-1 hover:bg-chart-1/10\"\n                            data-testid={`button-edit-request-${request.id}`}\n                          >\n                            <i className=\"bi bi-pencil text-sm\"></i>\n                          </Button>\n                        )}\n                        {canDeleteRequests && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(request.id)}\n                            className=\"p-2 text-destructive hover:bg-destructive/10\"\n                            data-testid={`button-delete-request-${request.id}`}\n                          >\n                            <i className=\"bi bi-trash text-sm\"></i>\n                          </Button>\n                        )}\n                        {currentUser?.role === 'technician' && request.technicianId === currentUser.id && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleAddFollowUp(request)}\n                            className=\"p-2 text-blue-600 hover:bg-blue-50\"\n                            data-testid={`button-add-followup-${request.id}`}\n                          >\n                            <i className=\"bi bi-chat-dots text-sm\"></i>\n                          </Button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n\n      {/* Follow-up Dialog */}\n      <Dialog open={isFollowUpDialogOpen} onOpenChange={setIsFollowUpDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>إضافة متابعة</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmitFollowUp} className=\"space-y-4\">\n            <div>\n              <Label>تفاصيل المتابعة</Label>\n              <Textarea\n                value={followUpText}\n                onChange={(e) => setFollowUpText(e.target.value)}\n                placeholder=\"اكتب تفاصيل المتابعة هنا...\"\n                required\n                className=\"text-right min-h-[100px]\"\n                data-testid=\"textarea-followup-text\"\n              />\n            </div>\n            <div>\n              <Label>تحديث حالة الطلب (اختياري)</Label>\n              <Select value={newStatus} onValueChange={setNewStatus}>\n                <SelectTrigger data-testid=\"select-new-status\">\n                  <SelectValue placeholder=\"اختر حالة جديدة للطلب\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"pending\">في الانتظار</SelectItem>\n                  <SelectItem value=\"in_progress\">قيد التقدم</SelectItem>\n                  <SelectItem value=\"completed\">مكتمل</SelectItem>\n                  <SelectItem value=\"cancelled\">ملغي</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                type=\"submit\" \n                className=\"flex-1\" \n                disabled={createFollowUpMutation.isPending}\n                data-testid=\"button-submit-followup\"\n              >\n                {createFollowUpMutation.isPending ? \"جارٍ الإضافة...\" : \"إضافة المتابعة\"}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsFollowUpDialogOpen(false)}\n                data-testid=\"button-cancel-followup\"\n              >\n                إلغاء\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":25112},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Settings() {\n  const [companySettings, setCompanySettings] = useState({\n    name: \"شركة سوكاني للأجهزة المنزلية\",\n    email: \"info@sokany.com\",\n    phone: \"+966112345678\",\n    address: \"الرياض، المملكة العربية السعودية\",\n    website: \"www.sokany.com\",\n    taxNumber: \"1234567890\"\n  });\n\n  const [systemSettings, setSystemSettings] = useState({\n    language: \"ar\",\n    timezone: \"Asia/Riyadh\",\n    currency: \"SAR\",\n    dateFormat: \"dd/MM/yyyy\",\n    workingHours: \"08:00-17:00\"\n  });\n\n  const [notificationSettings, setNotificationSettings] = useState({\n    emailNotifications: true,\n    smsNotifications: true,\n    newRequestAlert: true,\n    completionAlert: true,\n    inventoryAlert: true\n  });\n\n  const { toast } = useToast();\n\n  const handleSaveCompany = () => {\n    toast({ title: \"تم حفظ إعدادات الشركة بنجاح\" });\n  };\n\n  const handleSaveSystem = () => {\n    toast({ title: \"تم حفظ إعدادات النظام بنجاح\" });\n  };\n\n  const handleSaveNotifications = () => {\n    toast({ title: \"تم حفظ إعدادات الإشعارات بنجاح\" });\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">الإعدادات</h1>\n        <p className=\"text-muted-foreground\">إدارة إعدادات النظام والشركة</p>\n      </div>\n\n      <Tabs defaultValue=\"company\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"company\">إعدادات الشركة</TabsTrigger>\n          <TabsTrigger value=\"system\">إعدادات النظام</TabsTrigger>\n          <TabsTrigger value=\"notifications\">الإشعارات</TabsTrigger>\n          <TabsTrigger value=\"security\">الأمان</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"company\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <i className=\"bi bi-building\"></i>\n                معلومات الشركة\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"companyName\">اسم الشركة</Label>\n                  <Input\n                    id=\"companyName\"\n                    value={companySettings.name}\n                    onChange={(e) => setCompanySettings({...companySettings, name: e.target.value})}\n                    data-testid=\"input-company-name\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"companyEmail\">البريد الإلكتروني</Label>\n                  <Input\n                    id=\"companyEmail\"\n                    type=\"email\"\n                    value={companySettings.email}\n                    onChange={(e) => setCompanySettings({...companySettings, email: e.target.value})}\n                    data-testid=\"input-company-email\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"companyPhone\">رقم الهاتف</Label>\n                  <Input\n                    id=\"companyPhone\"\n                    value={companySettings.phone}\n                    onChange={(e) => setCompanySettings({...companySettings, phone: e.target.value})}\n                    data-testid=\"input-company-phone\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"companyWebsite\">الموقع الإلكتروني</Label>\n                  <Input\n                    id=\"companyWebsite\"\n                    value={companySettings.website}\n                    onChange={(e) => setCompanySettings({...companySettings, website: e.target.value})}\n                    data-testid=\"input-company-website\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"taxNumber\">الرقم الضريبي</Label>\n                  <Input\n                    id=\"taxNumber\"\n                    value={companySettings.taxNumber}\n                    onChange={(e) => setCompanySettings({...companySettings, taxNumber: e.target.value})}\n                    data-testid=\"input-tax-number\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"companyAddress\">العنوان</Label>\n                <Textarea\n                  id=\"companyAddress\"\n                  value={companySettings.address}\n                  onChange={(e) => setCompanySettings({...companySettings, address: e.target.value})}\n                  rows={3}\n                  data-testid=\"textarea-company-address\"\n                />\n              </div>\n              \n              <Button onClick={handleSaveCompany} data-testid=\"button-save-company\">\n                <i className=\"bi bi-check-circle ml-2\"></i>\n                حفظ إعدادات الشركة\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"system\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <i className=\"bi bi-gear\"></i>\n                إعدادات النظام العامة\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"language\">اللغة</Label>\n                  <Select value={systemSettings.language} onValueChange={(value) => \n                    setSystemSettings({...systemSettings, language: value})}>\n                    <SelectTrigger data-testid=\"select-language\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"ar\">العربية</SelectItem>\n                      <SelectItem value=\"en\">English</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"timezone\">المنطقة الزمنية</Label>\n                  <Select value={systemSettings.timezone} onValueChange={(value) => \n                    setSystemSettings({...systemSettings, timezone: value})}>\n                    <SelectTrigger data-testid=\"select-timezone\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Asia/Riyadh\">الرياض (GMT+3)</SelectItem>\n                      <SelectItem value=\"Asia/Dubai\">دبي (GMT+4)</SelectItem>\n                      <SelectItem value=\"Asia/Kuwait\">الكويت (GMT+3)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currency\">العملة</Label>\n                  <Select value={systemSettings.currency} onValueChange={(value) => \n                    setSystemSettings({...systemSettings, currency: value})}>\n                    <SelectTrigger data-testid=\"select-currency\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"SAR\">ريال سعودي (SAR)</SelectItem>\n                      <SelectItem value=\"AED\">درهم إماراتي (AED)</SelectItem>\n                      <SelectItem value=\"KWD\">دينار كويتي (KWD)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"dateFormat\">تنسيق التاريخ</Label>\n                  <Select value={systemSettings.dateFormat} onValueChange={(value) => \n                    setSystemSettings({...systemSettings, dateFormat: value})}>\n                    <SelectTrigger data-testid=\"select-date-format\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"dd/MM/yyyy\">يوم/شهر/سنة</SelectItem>\n                      <SelectItem value=\"MM/dd/yyyy\">شهر/يوم/سنة</SelectItem>\n                      <SelectItem value=\"yyyy-MM-dd\">سنة-شهر-يوم</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"workingHours\">ساعات العمل</Label>\n                  <Input\n                    id=\"workingHours\"\n                    value={systemSettings.workingHours}\n                    onChange={(e) => setSystemSettings({...systemSettings, workingHours: e.target.value})}\n                    placeholder=\"08:00-17:00\"\n                    data-testid=\"input-working-hours\"\n                  />\n                </div>\n              </div>\n              \n              <Button onClick={handleSaveSystem} data-testid=\"button-save-system\">\n                <i className=\"bi bi-check-circle ml-2\"></i>\n                حفظ إعدادات النظام\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <i className=\"bi bi-bell\"></i>\n                إعدادات الإشعارات\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <Label className=\"text-base font-medium\">الإشعارات بالبريد الإلكتروني</Label>\n                    <p className=\"text-sm text-muted-foreground\">استقبال إشعارات عبر البريد الإلكتروني</p>\n                  </div>\n                  <Switch\n                    checked={notificationSettings.emailNotifications}\n                    onCheckedChange={(checked) => \n                      setNotificationSettings({...notificationSettings, emailNotifications: checked})}\n                    data-testid=\"switch-email-notifications\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <Label className=\"text-base font-medium\">الإشعارات بالرسائل النصية</Label>\n                    <p className=\"text-sm text-muted-foreground\">استقبال إشعارات عبر الرسائل النصية</p>\n                  </div>\n                  <Switch\n                    checked={notificationSettings.smsNotifications}\n                    onCheckedChange={(checked) => \n                      setNotificationSettings({...notificationSettings, smsNotifications: checked})}\n                    data-testid=\"switch-sms-notifications\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <Label className=\"text-base font-medium\">تنبيه طلبات الصيانة الجديدة</Label>\n                    <p className=\"text-sm text-muted-foreground\">تنبيه عند وصول طلب صيانة جديد</p>\n                  </div>\n                  <Switch\n                    checked={notificationSettings.newRequestAlert}\n                    onCheckedChange={(checked) => \n                      setNotificationSettings({...notificationSettings, newRequestAlert: checked})}\n                    data-testid=\"switch-new-request-alert\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <Label className=\"text-base font-medium\">تنبيه إكمال الصيانة</Label>\n                    <p className=\"text-sm text-muted-foreground\">تنبيه عند اكتمال أعمال الصيانة</p>\n                  </div>\n                  <Switch\n                    checked={notificationSettings.completionAlert}\n                    onCheckedChange={(checked) => \n                      setNotificationSettings({...notificationSettings, completionAlert: checked})}\n                    data-testid=\"switch-completion-alert\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <Label className=\"text-base font-medium\">تنبيه المخزون</Label>\n                    <p className=\"text-sm text-muted-foreground\">تنبيه عند نفاد أو نقص المخزون</p>\n                  </div>\n                  <Switch\n                    checked={notificationSettings.inventoryAlert}\n                    onCheckedChange={(checked) => \n                      setNotificationSettings({...notificationSettings, inventoryAlert: checked})}\n                    data-testid=\"switch-inventory-alert\"\n                  />\n                </div>\n              </div>\n              \n              <Button onClick={handleSaveNotifications} data-testid=\"button-save-notifications\">\n                <i className=\"bi bi-check-circle ml-2\"></i>\n                حفظ إعدادات الإشعارات\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <i className=\"bi bi-shield-lock\"></i>\n                إعدادات الأمان\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\">كلمة المرور</h3>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"currentPassword\">كلمة المرور الحالية</Label>\n                    <Input\n                      id=\"currentPassword\"\n                      type=\"password\"\n                      placeholder=\"••••••••\"\n                      data-testid=\"input-current-password\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"newPassword\">كلمة المرور الجديدة</Label>\n                    <Input\n                      id=\"newPassword\"\n                      type=\"password\"\n                      placeholder=\"••••••••\"\n                      data-testid=\"input-new-password\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"confirmPassword\">تأكيد كلمة المرور</Label>\n                    <Input\n                      id=\"confirmPassword\"\n                      type=\"password\"\n                      placeholder=\"••••••••\"\n                      data-testid=\"input-confirm-password\"\n                    />\n                  </div>\n                  <Button data-testid=\"button-change-password\">\n                    <i className=\"bi bi-key ml-2\"></i>\n                    تغيير كلمة المرور\n                  </Button>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\">إعدادات الجلسة</h3>\n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <Label className=\"text-base font-medium\">تسجيل الخروج التلقائي</Label>\n                      <p className=\"text-sm text-muted-foreground\">تسجيل الخروج بعد فترة عدم نشاط</p>\n                    </div>\n                    <Switch data-testid=\"switch-auto-logout\" />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div>\n                      <Label className=\"text-base font-medium\">التحقق بخطوتين</Label>\n                      <p className=\"text-sm text-muted-foreground\">تأمين إضافي للحساب</p>\n                    </div>\n                    <Switch data-testid=\"switch-two-factor\" />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"sessionTimeout\">مدة الجلسة (بالدقائق)</Label>\n                    <Input\n                      id=\"sessionTimeout\"\n                      type=\"number\"\n                      defaultValue=\"60\"\n                      min=\"15\"\n                      max=\"480\"\n                      data-testid=\"input-session-timeout\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":18605},"client/src/pages/transfers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiGet, apiPost, apiPut, apiDelete } from \"../lib/db\";\nimport { format } from \"date-fns\";\nimport { ar } from \"date-fns/locale\";\n\ninterface Transfer {\n  id: string;\n  transferNumber: string;\n  fromWarehouseId: string;\n  toWarehouseId: string;\n  sparePartId: string;\n  quantity: number;\n  reason: string;\n  status: \"pending\" | \"approved\" | \"in_transit\" | \"completed\" | \"cancelled\";\n  requestedBy: string;\n  approvedBy?: string;\n  notes?: string;\n  createdAt: Date;\n  updatedAt: Date;\n  completedAt?: Date;\n}\n\ninterface InsertTransfer {\n  transferNumber: string;\n  fromWarehouseId: string;\n  toWarehouseId: string;\n  sparePartId: string;\n  quantity: number;\n  reason: string;\n  status?: \"pending\" | \"approved\" | \"in_transit\" | \"completed\" | \"cancelled\";\n  requestedBy: string;\n  notes?: string;\n}\n\n// Mock data for transfers\nconst mockTransfers: Transfer[] = [\n  {\n    id: \"trans-1\",\n    transferNumber: \"TR-2024-001\",\n    fromWarehouseId: \"warehouse-1\",\n    toWarehouseId: \"warehouse-2\",\n    sparePartId: \"part-1\",\n    quantity: 5,\n    reason: \"نقص في المخزون\",\n    status: \"pending\",\n    requestedBy: \"user-1\",\n    notes: \"نقل عاجل مطلوب\",\n    createdAt: new Date(\"2024-09-01\"),\n    updatedAt: new Date(\"2024-09-01\")\n  },\n  {\n    id: \"trans-2\", \n    transferNumber: \"TR-2024-002\",\n    fromWarehouseId: \"warehouse-2\",\n    toWarehouseId: \"warehouse-1\",\n    sparePartId: \"part-2\",\n    quantity: 3,\n    reason: \"طلب من فني\",\n    status: \"completed\",\n    requestedBy: \"user-2\",\n    approvedBy: \"user-1\",\n    notes: \"تم النقل بنجاح\",\n    createdAt: new Date(\"2024-08-28\"),\n    updatedAt: new Date(\"2024-09-02\"),\n    completedAt: new Date(\"2024-09-02\")\n  }\n];\n\n// Mock spare parts data\nconst mockSpareParts = [\n  { id: \"part-1\", name: \"محرك غسالة\", partNumber: \"MT-001\" },\n  { id: \"part-2\", name: \"ضاغط ثلاجة\", partNumber: \"CP-002\" },\n  { id: \"part-3\", name: \"مضخة مياه\", partNumber: \"WP-003\" }\n];\n\n// Mock warehouses data\nconst mockWarehouses = [\n  { id: \"warehouse-1\", name: \"مخزن الرياض الرئيسي\", location: \"الرياض\" },\n  { id: \"warehouse-2\", name: \"مخزن جدة\", location: \"جدة\" },\n  { id: \"warehouse-3\", name: \"مخزن الدمام\", location: \"الدمام\" }\n];\n\nconst statusColors = {\n  pending: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\",\n  approved: \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\", \n  in_transit: \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300\",\n  completed: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\",\n  cancelled: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\"\n};\n\nconst statusLabels = {\n  pending: \"في الانتظار\",\n  approved: \"موافق عليه\",\n  in_transit: \"في الطريق\", \n  completed: \"مكتمل\",\n  cancelled: \"ملغي\"\n};\n\nexport default function Transfers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [warehouseFilter, setWarehouseFilter] = useState(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingTransfer, setEditingTransfer] = useState<Transfer | null>(null);\n  const [formData, setFormData] = useState<Partial<InsertTransfer>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock API calls - replace with real API calls\n  const transfers = mockTransfers;\n  const spareParts = mockSpareParts;\n  const warehouses = mockWarehouses;\n\n  const createTransferMutation = {\n    mutate: (data: InsertTransfer) => {\n      // Mock creation\n      setIsAddDialogOpen(false);\n      setFormData({});\n      toast({ title: \"تم إنشاء طلب التحويل بنجاح\" });\n    }\n  };\n\n  const updateTransferMutation = {\n    mutate: ({ id, data }: { id: string; data: Partial<InsertTransfer> }) => {\n      // Mock update\n      setEditingTransfer(null);\n      setFormData({});\n      toast({ title: \"تم تحديث طلب التحويل بنجاح\" });\n    }\n  };\n\n  const deleteTransferMutation = {\n    mutate: (id: string) => {\n      // Mock delete\n      toast({ title: \"تم حذف طلب التحويل بنجاح\" });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingTransfer) {\n      updateTransferMutation.mutate({ id: editingTransfer.id, data: formData });\n    } else {\n      const transferNumber = `TR-2024-${String(transfers.length + 1).padStart(3, '0')}`;\n      createTransferMutation.mutate({\n        ...formData,\n        transferNumber,\n        requestedBy: \"current-user\"\n      } as InsertTransfer);\n    }\n  };\n\n  const handleEdit = (transfer: Transfer) => {\n    setEditingTransfer(transfer);\n    setFormData({\n      fromWarehouseId: transfer.fromWarehouseId,\n      toWarehouseId: transfer.toWarehouseId,\n      sparePartId: transfer.sparePartId,\n      quantity: transfer.quantity,\n      reason: transfer.reason,\n      notes: transfer.notes\n    });\n  };\n\n  const handleStatusChange = (transferId: string, newStatus: string) => {\n    updateTransferMutation.mutate({ \n      id: transferId, \n      data: { status: newStatus as any } \n    });\n  };\n\n  const filteredTransfers = transfers.filter(transfer => {\n    const matchesSearch = transfer.transferNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         transfer.reason.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || transfer.status === statusFilter;\n    const matchesWarehouse = warehouseFilter === \"all\" || \n                            transfer.fromWarehouseId === warehouseFilter || \n                            transfer.toWarehouseId === warehouseFilter;\n    \n    return matchesSearch && matchesStatus && matchesWarehouse;\n  });\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2\">تحويل قطع الغيار</h1>\n        <p className=\"text-muted-foreground\">إدارة تحويل قطع الغيار بين المخازن</p>\n      </div>\n\n      <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n        <div className=\"flex-1\">\n          <Input\n            placeholder=\"البحث برقم التحويل أو السبب...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            data-testid=\"input-search-transfers\"\n          />\n        </div>\n        \n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger className=\"w-full sm:w-[180px]\" data-testid=\"select-status-filter\">\n            <SelectValue placeholder=\"تصفية بالحالة\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">جميع الحالات</SelectItem>\n            <SelectItem value=\"pending\">في الانتظار</SelectItem>\n            <SelectItem value=\"approved\">موافق عليه</SelectItem>\n            <SelectItem value=\"in_transit\">في الطريق</SelectItem>\n            <SelectItem value=\"completed\">مكتمل</SelectItem>\n            <SelectItem value=\"cancelled\">ملغي</SelectItem>\n          </SelectContent>\n        </Select>\n        \n        <Select value={warehouseFilter} onValueChange={setWarehouseFilter}>\n          <SelectTrigger className=\"w-full sm:w-[180px]\" data-testid=\"select-warehouse-filter\">\n            <SelectValue placeholder=\"تصفية بالمخزن\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">جميع المخازن</SelectItem>\n            {warehouses.map(warehouse => (\n              <SelectItem key={warehouse.id} value={warehouse.id}>\n                {warehouse.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-transfer\">\n              <i className=\"bi bi-plus-circle ml-2\"></i>\n              طلب تحويل جديد\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingTransfer ? \"تعديل طلب التحويل\" : \"طلب تحويل جديد\"}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fromWarehouse\">من مخزن</Label>\n                  <Select \n                    value={formData.fromWarehouseId || \"\"} \n                    onValueChange={(value) => setFormData({...formData, fromWarehouseId: value})}\n                  >\n                    <SelectTrigger data-testid=\"select-from-warehouse\">\n                      <SelectValue placeholder=\"اختر المخزن المرسل\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {warehouses.map(warehouse => (\n                        <SelectItem key={warehouse.id} value={warehouse.id}>\n                          {warehouse.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"toWarehouse\">إلى مخزن</Label>\n                  <Select \n                    value={formData.toWarehouseId || \"\"} \n                    onValueChange={(value) => setFormData({...formData, toWarehouseId: value})}\n                  >\n                    <SelectTrigger data-testid=\"select-to-warehouse\">\n                      <SelectValue placeholder=\"اختر المخزن المستقبل\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {warehouses.map(warehouse => (\n                        <SelectItem key={warehouse.id} value={warehouse.id}>\n                          {warehouse.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sparePart\">قطعة الغيار</Label>\n                  <Select \n                    value={formData.sparePartId || \"\"} \n                    onValueChange={(value) => setFormData({...formData, sparePartId: value})}\n                  >\n                    <SelectTrigger data-testid=\"select-spare-part\">\n                      <SelectValue placeholder=\"اختر قطعة الغيار\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {spareParts.map(part => (\n                        <SelectItem key={part.id} value={part.id}>\n                          {part.name} ({part.partNumber})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"quantity\">الكمية</Label>\n                  <Input\n                    id=\"quantity\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={formData.quantity || \"\"}\n                    onChange={(e) => setFormData({...formData, quantity: parseInt(e.target.value)})}\n                    placeholder=\"أدخل الكمية\"\n                    required\n                    data-testid=\"input-quantity\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reason\">سبب التحويل</Label>\n                <Input\n                  id=\"reason\"\n                  value={formData.reason || \"\"}\n                  onChange={(e) => setFormData({...formData, reason: e.target.value})}\n                  placeholder=\"أدخل سبب التحويل\"\n                  required\n                  data-testid=\"input-reason\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">ملاحظات</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={formData.notes || \"\"}\n                  onChange={(e) => setFormData({...formData, notes: e.target.value})}\n                  placeholder=\"ملاحظات إضافية (اختياري)\"\n                  rows={3}\n                  data-testid=\"textarea-notes\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => {\n                  setIsAddDialogOpen(false);\n                  setEditingTransfer(null);\n                  setFormData({});\n                }}>\n                  إلغاء\n                </Button>\n                <Button type=\"submit\" data-testid=\"button-submit-transfer\">\n                  {editingTransfer ? \"تحديث\" : \"إنشاء\"} طلب التحويل\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {filteredTransfers.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <i className=\"bi bi-arrow-left-right text-4xl text-muted-foreground mb-4\"></i>\n            <h3 className=\"text-lg font-medium text-foreground mb-2\">لا توجد طلبات تحويل</h3>\n            <p className=\"text-muted-foreground mb-4\">لم يتم العثور على أي طلبات تحويل مطابقة للبحث</p>\n            <Button onClick={() => setIsAddDialogOpen(true)}>\n              إنشاء طلب تحويل جديد\n            </Button>\n          </div>\n        ) : (\n          filteredTransfers.map((transfer) => (\n            <Card key={transfer.id} className=\"hover-scale\">\n              <CardHeader>\n                <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n                  <div>\n                    <CardTitle className=\"text-lg\" data-testid={`text-transfer-number-${transfer.id}`}>\n                      {transfer.transferNumber}\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {format(new Date(transfer.createdAt), \"d MMMM yyyy\", { locale: ar })}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge \n                      className={statusColors[transfer.status]} \n                      data-testid={`badge-status-${transfer.id}`}\n                    >\n                      {statusLabels[transfer.status]}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">من مخزن</p>\n                    <p className=\"font-medium\" data-testid={`text-from-warehouse-${transfer.id}`}>\n                      {warehouses.find(w => w.id === transfer.fromWarehouseId)?.name || \"غير محدد\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">إلى مخزن</p>\n                    <p className=\"font-medium\" data-testid={`text-to-warehouse-${transfer.id}`}>\n                      {warehouses.find(w => w.id === transfer.toWarehouseId)?.name || \"غير محدد\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">قطعة الغيار</p>\n                    <p className=\"font-medium\" data-testid={`text-spare-part-${transfer.id}`}>\n                      {spareParts.find(p => p.id === transfer.sparePartId)?.name || \"غير محدد\"}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">الكمية</p>\n                    <p className=\"font-medium\" data-testid={`text-quantity-${transfer.id}`}>\n                      {transfer.quantity}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"mb-4\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">سبب التحويل</p>\n                  <p className=\"text-foreground\" data-testid={`text-reason-${transfer.id}`}>\n                    {transfer.reason}\n                  </p>\n                </div>\n                \n                {transfer.notes && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">ملاحظات</p>\n                    <p className=\"text-foreground\" data-testid={`text-notes-${transfer.id}`}>\n                      {transfer.notes}\n                    </p>\n                  </div>\n                )}\n                \n                <div className=\"flex flex-wrap gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(transfer)}\n                    data-testid={`button-edit-${transfer.id}`}\n                  >\n                    <i className=\"bi bi-pencil ml-2\"></i>\n                    تعديل\n                  </Button>\n                  \n                  {transfer.status === \"pending\" && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleStatusChange(transfer.id, \"approved\")}\n                      data-testid={`button-approve-${transfer.id}`}\n                    >\n                      <i className=\"bi bi-check-circle ml-2\"></i>\n                      موافقة\n                    </Button>\n                  )}\n                  \n                  {transfer.status === \"approved\" && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleStatusChange(transfer.id, \"in_transit\")}\n                      data-testid={`button-in-transit-${transfer.id}`}\n                    >\n                      <i className=\"bi bi-truck ml-2\"></i>\n                      في الطريق\n                    </Button>\n                  )}\n                  \n                  {transfer.status === \"in_transit\" && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleStatusChange(transfer.id, \"completed\")}\n                      data-testid={`button-complete-${transfer.id}`}\n                    >\n                      <i className=\"bi bi-check-square ml-2\"></i>\n                      إكمال\n                    </Button>\n                  )}\n                  \n                  {(transfer.status === \"pending\" || transfer.status === \"approved\") && (\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => handleStatusChange(transfer.id, \"cancelled\")}\n                      data-testid={`button-cancel-${transfer.id}`}\n                    >\n                      <i className=\"bi bi-x-circle ml-2\"></i>\n                      إلغاء\n                    </Button>\n                  )}\n                  \n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => deleteTransferMutation.mutate(transfer.id)}\n                    data-testid={`button-delete-${transfer.id}`}\n                  >\n                    <i className=\"bi bi-trash ml-2\"></i>\n                    حذف\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":21085},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiGet, apiPost, apiPut, apiDelete } from \"../lib/db\";\nimport { useAuth } from \"../lib/auth\";\nimport { canCreate, canUpdate, canDelete } from \"../lib/permissions\";\nimport type { User, InsertUser } from \"@shared/schema\";\n\nexport default function Users() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [formData, setFormData] = useState<Partial<InsertUser>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user: currentUser } = useAuth();\n\n  // Check permissions\n  const canCreateUsers = currentUser ? canCreate(currentUser.role, 'users') : false;\n  const canUpdateUsers = currentUser ? canUpdate(currentUser.role, 'users') : false;\n  const canDeleteUsers = currentUser ? canDelete(currentUser.role, 'users') : false;\n\n  const { data: users, isLoading } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: () => apiGet('/api/users'),\n  });\n\n  const { data: serviceCenters } = useQuery({\n    queryKey: ['/api/service-centers'],\n    queryFn: () => apiGet('/api/service-centers'),\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: (data: InsertUser) => apiPost('/api/users', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setIsAddDialogOpen(false);\n      setFormData({});\n      toast({ title: \"تم إضافة المستخدم بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في إضافة المستخدم\" });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertUser> }) => \n      apiPut(`/api/users/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setEditingUser(null);\n      setFormData({});\n      toast({ title: \"تم تحديث المستخدم بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث المستخدم\" });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: (id: string) => apiDelete(`/api/users/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({ title: \"تم حذف المستخدم بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف المستخدم\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingUser) {\n      updateUserMutation.mutate({ id: editingUser.id, data: formData });\n    } else {\n      createUserMutation.mutate(formData as InsertUser);\n    }\n  };\n\n  const handleEdit = (user: User) => {\n    setEditingUser(user);\n    setFormData(user);\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا المستخدم؟\")) {\n      deleteUserMutation.mutate(id);\n    }\n  };\n\n  const filteredUsers = users?.filter((user: User) => {\n    const matchesSearch = user.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = roleFilter === \"all\" || user.role === roleFilter;\n    const matchesStatus = statusFilter === \"all\" || user.status === statusFilter;\n    return matchesSearch && matchesRole && matchesStatus;\n  }) || [];\n\n  return (\n    <div>\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">إدارة المستخدمين</h1>\n          <p className=\"text-muted-foreground\">إدارة حسابات المستخدمين وصلاحياتهم</p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          {canCreateUsers && (\n            <DialogTrigger asChild>\n              <Button \n                className=\"flex items-center space-x-2 space-x-reverse\"\n                onClick={() => {\n                  setEditingUser(null);\n                  setFormData({});\n                }}\n                data-testid=\"button-add-user\"\n              >\n                <i className=\"bi bi-plus-circle\"></i>\n                <span>إضافة مستخدم</span>\n              </Button>\n            </DialogTrigger>\n          )}\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{editingUser ? \"تعديل مستخدم\" : \"إضافة مستخدم جديد\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label>الاسم الكامل</Label>\n                <Input\n                  value={formData.fullName || \"\"}\n                  onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-user-fullname\"\n                />\n              </div>\n              <div>\n                <Label>البريد الإلكتروني</Label>\n                <Input\n                  type=\"email\"\n                  value={formData.email || \"\"}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-user-email\"\n                />\n              </div>\n              <div>\n                <Label>رقم الهاتف</Label>\n                <Input\n                  value={formData.phone || \"\"}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  className=\"text-right\"\n                  data-testid=\"input-user-phone\"\n                />\n              </div>\n              <div>\n                <Label>الدور</Label>\n                <Select value={formData.role || \"\"} onValueChange={(value) => setFormData({ ...formData, role: value as any })}>\n                  <SelectTrigger data-testid=\"select-user-role\">\n                    <SelectValue placeholder=\"اختر الدور\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin\">مدير</SelectItem>\n                    <SelectItem value=\"manager\">مدير مركز</SelectItem>\n                    <SelectItem value=\"technician\">فني</SelectItem>\n                    <SelectItem value=\"receptionist\">موظف استقبال</SelectItem>\n                    <SelectItem value=\"warehouse_manager\">مدير مخزن</SelectItem>\n                    <SelectItem value=\"customer\">عميل</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              {(formData.role === 'manager' || formData.role === 'technician' || formData.role === 'receptionist') && (\n                <div>\n                  <Label>مركز الخدمة</Label>\n                  <Select value={formData.centerId || \"none\"} onValueChange={(value) => setFormData({ ...formData, centerId: value === \"none\" ? null : value })}>\n                    <SelectTrigger data-testid=\"select-user-center\">\n                      <SelectValue placeholder=\"اختر مركز الخدمة\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">بدون مركز</SelectItem>\n                      {serviceCenters?.map((center: any) => (\n                        <SelectItem key={center.id} value={center.id}>{center.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n              {!editingUser && (\n                <div>\n                  <Label>كلمة المرور</Label>\n                  <Input\n                    type=\"password\"\n                    value={formData.password || \"\"}\n                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}\n                    required\n                    className=\"text-right\"\n                    data-testid=\"input-user-password\"\n                  />\n                </div>\n              )}\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-save-user\">\n                {editingUser ? \"تحديث\" : \"إضافة\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n      \n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">البحث</Label>\n              <Input\n                placeholder=\"البحث بالاسم أو البريد الإلكتروني...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"text-right\"\n                data-testid=\"input-search-users\"\n              />\n            </div>\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">الدور</Label>\n              <Select value={roleFilter} onValueChange={setRoleFilter}>\n                <SelectTrigger data-testid=\"select-filter-role\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">جميع الأدوار</SelectItem>\n                  <SelectItem value=\"admin\">مدير</SelectItem>\n                  <SelectItem value=\"manager\">مدير مركز</SelectItem>\n                  <SelectItem value=\"technician\">فني</SelectItem>\n                  <SelectItem value=\"customer\">عميل</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">الحالة</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"select-filter-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">جميع الحالات</SelectItem>\n                  <SelectItem value=\"active\">نشط</SelectItem>\n                  <SelectItem value=\"inactive\">غير نشط</SelectItem>\n                  <SelectItem value=\"pending\">في الانتظار</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted\">\n              <tr>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الاسم</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">البريد الإلكتروني</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الدور</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">مركز الخدمة</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الحالة</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الإجراءات</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {isLoading ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8\">\n                    <div className=\"loading-spinner mx-auto\"></div>\n                  </td>\n                </tr>\n              ) : filteredUsers.length === 0 ? (\n                <tr>\n                  <td colSpan={6} className=\"text-center py-8 text-muted-foreground\">\n                    لا توجد مستخدمين\n                  </td>\n                </tr>\n              ) : (\n                filteredUsers.map((user: User) => (\n                  <tr key={user.id} className=\"hover:bg-muted/50\" data-testid={`row-user-${user.id}`}>\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-medium text-primary\">\n                            {user.fullName?.charAt(0) || 'م'}\n                          </span>\n                        </div>\n                        <span className=\"font-medium text-card-foreground\">{user.fullName}</span>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-4 text-card-foreground\">{user.email}</td>\n                    <td className=\"py-4 px-4\">\n                      <span className=\"bg-chart-1/10 text-chart-1 px-2 py-1 rounded-full text-xs font-medium\">\n                        {user.role === 'admin' ? 'مدير' :\n                         user.role === 'manager' ? 'مدير مركز' :\n                         user.role === 'technician' ? 'فني' :\n                         user.role === 'receptionist' ? 'موظف استقبال' :\n                         user.role === 'warehouse_manager' ? 'مدير مخزن' : 'عميل'}\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <span className=\"text-card-foreground\">\n                        {user.centerId ? \n                          serviceCenters?.find((center: any) => center.id === user.centerId)?.name || 'مركز غير محدد'\n                          : 'بدون مركز'}\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <span className={`status-badge status-${user.status === 'active' ? 'completed' : user.status === 'pending' ? 'pending' : 'cancelled'}`}>\n                        {user.status === 'active' ? 'نشط' : user.status === 'pending' ? 'في الانتظار' : 'غير نشط'}\n                      </span>\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        {canUpdateUsers && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(user)}\n                            className=\"p-2 text-chart-1 hover:bg-chart-1/10\"\n                            data-testid={`button-edit-user-${user.id}`}\n                          >\n                            <i className=\"bi bi-pencil text-sm\"></i>\n                          </Button>\n                        )}\n                        {canDeleteUsers && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(user.id)}\n                            className=\"p-2 text-destructive hover:bg-destructive/10\"\n                            data-testid={`button-delete-user-${user.id}`}\n                          >\n                            <i className=\"bi bi-trash text-sm\"></i>\n                          </Button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":16597},"client/src/pages/warehouses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiGet, apiPost, apiPut, apiDelete } from \"../lib/db\";\nimport type { Warehouse, InsertWarehouse } from \"@shared/schema\";\n\nexport default function Warehouses() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [centerFilter, setCenterFilter] = useState(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingWarehouse, setEditingWarehouse] = useState<Warehouse | null>(null);\n  const [formData, setFormData] = useState<Partial<InsertWarehouse>>({});\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: warehouses, isLoading } = useQuery({\n    queryKey: ['/api/warehouses'],\n    queryFn: () => apiGet('/api/warehouses'),\n  });\n\n  const { data: users } = useQuery({\n    queryKey: ['/api/users'],\n    queryFn: () => apiGet('/api/users'),\n  });\n\n  const { data: centers } = useQuery({\n    queryKey: ['/api/service-centers'],\n    queryFn: () => apiGet('/api/service-centers'),\n  });\n\n  const createWarehouseMutation = useMutation({\n    mutationFn: (data: InsertWarehouse) => apiPost('/api/warehouses', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/warehouses'] });\n      setIsAddDialogOpen(false);\n      setFormData({});\n      toast({ title: \"تم إضافة المخزن بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في إضافة المخزن\" });\n    },\n  });\n\n  const updateWarehouseMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertWarehouse> }) => \n      apiPut(`/api/warehouses/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/warehouses'] });\n      setEditingWarehouse(null);\n      setFormData({});\n      toast({ title: \"تم تحديث المخزن بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث المخزن\" });\n    },\n  });\n\n  const deleteWarehouseMutation = useMutation({\n    mutationFn: (id: string) => apiDelete(`/api/warehouses/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/warehouses'] });\n      toast({ title: \"تم حذف المخزن بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف المخزن\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingWarehouse) {\n      updateWarehouseMutation.mutate({ id: editingWarehouse.id, data: formData });\n    } else {\n      createWarehouseMutation.mutate(formData as InsertWarehouse);\n    }\n  };\n\n  const handleEdit = (warehouse: Warehouse) => {\n    setEditingWarehouse(warehouse);\n    setFormData(warehouse);\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا المخزن؟\")) {\n      deleteWarehouseMutation.mutate(id);\n    }\n  };\n\n  const filteredWarehouses = warehouses?.filter((warehouse: Warehouse) => {\n    const matchesSearch = warehouse.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         warehouse.location?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCenter = centerFilter === \"all\" || warehouse.centerId === centerFilter;\n    return matchesSearch && matchesCenter;\n  }) || [];\n\n  const managers = users?.filter((user: any) => user.role === 'warehouse_manager') || [];\n\n  return (\n    <div>\n      <div className=\"mb-8 flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">المخازن</h1>\n          <p className=\"text-muted-foreground\">إدارة المخازن والمستودعات</p>\n        </div>\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"flex items-center space-x-2 space-x-reverse\"\n              onClick={() => {\n                setEditingWarehouse(null);\n                setFormData({});\n              }}\n              data-testid=\"button-add-warehouse\"\n            >\n              <i className=\"bi bi-plus-circle\"></i>\n              <span>إضافة مخزن</span>\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{editingWarehouse ? \"تعديل المخزن\" : \"إضافة مخزن جديد\"}</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <Label>اسم المخزن</Label>\n                <Input\n                  value={formData.name || \"\"}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-warehouse-name\"\n                />\n              </div>\n              <div>\n                <Label>الموقع</Label>\n                <Input\n                  value={formData.location || \"\"}\n                  onChange={(e) => setFormData({ ...formData, location: e.target.value })}\n                  required\n                  className=\"text-right\"\n                  data-testid=\"input-warehouse-location\"\n                />\n              </div>\n              <div>\n                <Label>مدير المخزن</Label>\n                <Select value={formData.managerId || \"\"} onValueChange={(value) => setFormData({ ...formData, managerId: value })}>\n                  <SelectTrigger data-testid=\"select-warehouse-manager\">\n                    <SelectValue placeholder=\"اختر مدير المخزن\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {managers.map((manager: any) => (\n                      <SelectItem key={manager.id} value={manager.id}>\n                        {manager.fullName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label>مركز الخدمة</Label>\n                <Select value={formData.centerId || \"\"} onValueChange={(value) => setFormData({ ...formData, centerId: value })}>\n                  <SelectTrigger data-testid=\"select-warehouse-center\">\n                    <SelectValue placeholder=\"اختر مركز الخدمة\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {centers?.map((center: any) => (\n                      <SelectItem key={center.id} value={center.id}>\n                        {center.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <Button type=\"submit\" className=\"w-full\" data-testid=\"button-save-warehouse\">\n                {editingWarehouse ? \"تحديث\" : \"إضافة\"}\n              </Button>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">البحث</Label>\n              <Input\n                placeholder=\"البحث بالاسم أو الموقع...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"text-right\"\n                data-testid=\"input-search-warehouses\"\n              />\n            </div>\n            <div>\n              <Label className=\"block text-sm font-medium text-card-foreground mb-2\">مركز الخدمة</Label>\n              <Select value={centerFilter} onValueChange={setCenterFilter}>\n                <SelectTrigger data-testid=\"select-filter-center\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">جميع المراكز</SelectItem>\n                  {centers?.map((center: any) => (\n                    <SelectItem key={center.id} value={center.id}>\n                      {center.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      <Card>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-muted\">\n              <tr>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">اسم المخزن</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الموقع</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">المدير</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">مركز الخدمة</th>\n                <th className=\"text-right py-3 px-4 text-sm font-medium text-muted-foreground\">الإجراءات</th>\n              </tr>\n            </thead>\n            <tbody className=\"divide-y divide-border\">\n              {isLoading ? (\n                <tr>\n                  <td colSpan={5} className=\"text-center py-8\">\n                    <div className=\"loading-spinner mx-auto\"></div>\n                  </td>\n                </tr>\n              ) : filteredWarehouses.length === 0 ? (\n                <tr>\n                  <td colSpan={5} className=\"text-center py-8 text-muted-foreground\">\n                    لا توجد مخازن\n                  </td>\n                </tr>\n              ) : (\n                filteredWarehouses.map((warehouse: Warehouse) => (\n                  <tr key={warehouse.id} className=\"hover:bg-muted/50\" data-testid={`row-warehouse-${warehouse.id}`}>\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center space-x-3 space-x-reverse\">\n                        <div className=\"w-10 h-10 bg-chart-2/10 rounded-lg flex items-center justify-center\">\n                          <i className=\"bi bi-shop text-chart-2\"></i>\n                        </div>\n                        <span className=\"font-medium text-card-foreground\">{warehouse.name}</span>\n                      </div>\n                    </td>\n                    <td className=\"py-4 px-4 text-card-foreground\">{warehouse.location}</td>\n                    <td className=\"py-4 px-4 text-card-foreground\">\n                      {managers.find((m: any) => m.id === warehouse.managerId)?.fullName || 'غير محدد'}\n                    </td>\n                    <td className=\"py-4 px-4 text-card-foreground\">\n                      {centers?.find((c: any) => c.id === warehouse.centerId)?.name || 'غير محدد'}\n                    </td>\n                    <td className=\"py-4 px-4\">\n                      <div className=\"flex items-center space-x-2 space-x-reverse\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(warehouse)}\n                          className=\"p-2 text-chart-1 hover:bg-chart-1/10\"\n                          data-testid={`button-edit-warehouse-${warehouse.id}`}\n                        >\n                          <i className=\"bi bi-pencil text-sm\"></i>\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(warehouse.id)}\n                          className=\"p-2 text-destructive hover:bg-destructive/10\"\n                          data-testid={`button-delete-warehouse-${warehouse.id}`}\n                        >\n                          <i className=\"bi bi-trash text-sm\"></i>\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":12838},"client/src/components/auth/login-page.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"../../lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const success = await login(email, password);\n      if (success) {\n        toast({\n          title: \"تم تسجيل الدخول بنجاح\",\n          description: \"مرحباً بك في نظام إدارة مراكز الصيانة\",\n        });\n        \n        // Get user role to determine redirect\n        const userData = JSON.parse(localStorage.getItem('user') || '{}');\n        if (userData.role === 'customer') {\n          setLocation(\"/dashboard/service-requests\");\n        } else {\n          setLocation(\"/dashboard\");\n        }\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"خطأ في تسجيل الدخول\",\n          description: \"تحقق من البريد الإلكتروني وكلمة المرور\",\n        });\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"خطأ في الاتصال\",\n        description: \"حدث خطأ أثناء تسجيل الدخول، حاول مرة أخرى\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 to-secondary/10\">\n      <div className=\"w-full max-w-md p-8 bg-card rounded-lg shadow-xl border border-border\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-24 h-12 mx-auto mb-4 bg-primary rounded-lg flex items-center justify-center\">\n            <span className=\"text-primary-foreground font-bold text-lg\">Sokany</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-card-foreground mb-2\">تسجيل الدخول</h1>\n          <p className=\"text-muted-foreground\">مرحباً بك في نظام إدارة مراكز الصيانة</p>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\" className=\"text-card-foreground\">البريد الإلكتروني</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"admin@sokany.com\"\n              required\n              data-testid=\"input-email\"\n              className=\"text-right\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\" className=\"text-card-foreground\">كلمة المرور</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"••••••••\"\n              required\n              data-testid=\"input-password\"\n              className=\"text-right\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 space-x-reverse\">\n              <Checkbox id=\"remember\" />\n              <Label htmlFor=\"remember\" className=\"text-sm text-muted-foreground\">تذكرني</Label>\n            </div>\n            <Button variant=\"link\" className=\"p-0 h-auto text-primary\">نسيت كلمة المرور؟</Button>\n          </div>\n          \n          <Button \n            type=\"submit\" \n            className=\"w-full\"\n            disabled={isLoading}\n            data-testid=\"button-login\"\n          >\n            {isLoading ? (\n              <div className=\"loading-spinner mx-auto\" />\n            ) : (\n              \"تسجيل الدخول\"\n            )}\n          </Button>\n        </form>\n        \n        <p className=\"mt-6 text-center text-sm text-muted-foreground\">\n          ليس لديك حساب؟{\" \"}\n          <Button \n            variant=\"link\" \n            className=\"p-0 h-auto font-medium\"\n            onClick={() => setLocation(\"/signup\")}\n            data-testid=\"link-signup\"\n          >\n            إنشاء حساب جديد\n          </Button>\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4818},"client/src/components/auth/signup-page.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiPost } from \"../../lib/db\";\n\nexport default function SignupPage() {\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    phone: \"\",\n    address: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await apiPost('/api/auth/register', formData);\n      toast({\n        title: \"تم إنشاء الحساب\",\n        description: \"سيتم مراجعة طلبك قريباً\",\n      });\n      setLocation(\"/waiting\");\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"خطأ في إنشاء الحساب\",\n        description: \"حدث خطأ أثناء إنشاء الحساب، حاول مرة أخرى\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 to-secondary/10\">\n      <div className=\"w-full max-w-md p-8 bg-card rounded-lg shadow-xl border border-border\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-24 h-12 mx-auto mb-4 bg-primary rounded-lg flex items-center justify-center\">\n            <span className=\"text-primary-foreground font-bold text-lg\">Sokany</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-card-foreground mb-2\">إنشاء حساب جديد</h1>\n          <p className=\"text-muted-foreground\">انضم إلى شبكة مراكز الصيانة المعتمدة</p>\n        </div>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"fullName\" className=\"text-card-foreground\">الاسم بالكامل</Label>\n            <Input\n              id=\"fullName\"\n              name=\"fullName\"\n              value={formData.fullName}\n              onChange={handleChange}\n              placeholder=\"أدخل اسمك الكامل\"\n              required\n              data-testid=\"input-fullname\"\n              className=\"text-right\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"phone\" className=\"text-card-foreground\">رقم الهاتف</Label>\n            <Input\n              id=\"phone\"\n              name=\"phone\"\n              type=\"tel\"\n              value={formData.phone}\n              onChange={handleChange}\n              placeholder=\"01xxxxxxxxx\"\n              required\n              data-testid=\"input-phone\"\n              className=\"text-right\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"address\" className=\"text-card-foreground\">العنوان</Label>\n            <Textarea\n              id=\"address\"\n              name=\"address\"\n              rows={2}\n              value={formData.address}\n              onChange={handleChange}\n              placeholder=\"أدخل عنوانك بالتفصيل\"\n              data-testid=\"textarea-address\"\n              className=\"text-right resize-none\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\" className=\"text-card-foreground\">البريد الإلكتروني</Label>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              placeholder=\"example@email.com\"\n              required\n              data-testid=\"input-email\"\n              className=\"text-right\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\" className=\"text-card-foreground\">كلمة المرور</Label>\n            <Input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              value={formData.password}\n              onChange={handleChange}\n              placeholder=\"••••••••\"\n              required\n              data-testid=\"input-password\"\n              className=\"text-right\"\n            />\n          </div>\n          \n          <Button \n            type=\"submit\" \n            className=\"w-full\"\n            disabled={isLoading}\n            data-testid=\"button-signup\"\n          >\n            {isLoading ? \"جاري الإنشاء...\" : \"إنشاء حساب\"}\n          </Button>\n        </form>\n        \n        <p className=\"mt-6 text-center text-sm text-muted-foreground\">\n          لديك حساب بالفعل؟{\" \"}\n          <Button \n            variant=\"link\" \n            className=\"p-0 h-auto font-medium\"\n            onClick={() => setLocation(\"/login\")}\n            data-testid=\"link-login\"\n          >\n            تسجيل الدخول\n          </Button>\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5462},"client/src/components/auth/waiting-page.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function WaitingPage() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 to-secondary/10\">\n      <div className=\"w-full max-w-md p-8 bg-card rounded-lg shadow-xl border border-border text-center\">\n        <div className=\"w-24 h-12 mx-auto mb-6 bg-primary rounded-lg flex items-center justify-center\">\n          <span className=\"text-primary-foreground font-bold text-lg\">Sokany</span>\n        </div>\n        \n        <div className=\"w-16 h-16 mx-auto mb-6 bg-primary/10 rounded-full flex items-center justify-center\">\n          <i className=\"bi bi-clock text-2xl text-primary\"></i>\n        </div>\n        \n        <h1 className=\"text-2xl font-bold text-card-foreground mb-4\">في انتظار الموافقة</h1>\n        \n        <div className=\"p-4 bg-accent rounded-lg border border-border mb-6\">\n          <i className=\"bi bi-info-circle text-primary text-lg mb-2\"></i>\n          <p className=\"text-accent-foreground text-sm\">\n            سوف يتم التواصل معك في أقرب وقت\n          </p>\n        </div>\n        \n        <p className=\"text-muted-foreground mb-6\">\n          تم استلام طلب إنشاء حسابك بنجاح وسيتم مراجعته من قبل المسؤول\n        </p>\n        \n        <Button \n          onClick={() => setLocation(\"/login\")}\n          variant=\"secondary\"\n          className=\"w-full\"\n          data-testid=\"button-back-to-login\"\n        >\n          العودة إلى تسجيل الدخول\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1724},"client/src/components/layout/dashboard-layout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"../../lib/auth\";\nimport Navbar from \"./navbar\";\nimport Sidebar from \"./sidebar\";\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading || !user) {\n    return <div className=\"min-h-screen flex items-center justify-center\">\n      <div className=\"loading-spinner\"></div>\n    </div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar onMobileMenuToggle={() => setIsSidebarOpen(!isSidebarOpen)} />\n      <div className=\"flex\">\n        <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />\n        <div className=\"main-content flex-1 lg:mr-64 p-6 min-h-[calc(100vh-4rem)]\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1168},"client/src/components/layout/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"../../lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface NavbarProps {\n  onMobileMenuToggle: () => void;\n}\n\nexport default function Navbar({ onMobileMenuToggle }: NavbarProps) {\n  const { user, logout } = useAuth();\n  const [theme, setTheme] = useState(\"dark\");\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"dark\" ? \"light\" : \"dark\";\n    setTheme(newTheme);\n    document.documentElement.className = newTheme;\n  };\n\n  return (\n    <nav className=\"bg-card border-b border-border sticky top-0 z-40\">\n      <div className=\"px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onMobileMenuToggle}\n              className=\"lg:hidden p-2\"\n              data-testid=\"button-mobile-menu\"\n            >\n              <i className=\"bi bi-list text-xl\"></i>\n            </Button>\n            <div className=\"flex-shrink-0 flex items-center mr-4\">\n              <div className=\"w-8 h-8 bg-primary rounded flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-bold text-sm\">S</span>\n              </div>\n              <span className=\"mr-2 text-xl font-bold text-foreground\">Sokany</span>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4 space-x-reverse\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              className=\"p-2\"\n              data-testid=\"button-theme-toggle\"\n            >\n              <i className={`bi bi-${theme === \"dark\" ? \"sun\" : \"moon\"} text-lg`}></i>\n            </Button>\n            \n            <div className=\"relative\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2\" data-testid=\"button-notifications\">\n                <i className=\"bi bi-bell text-lg\"></i>\n                <span className=\"notification-badge\">3</span>\n              </Button>\n            </div>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" className=\"flex items-center space-x-3 space-x-reverse p-2\" data-testid=\"button-user-menu\">\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                    <i className=\"bi bi-person text-primary-foreground\"></i>\n                  </div>\n                  <span className=\"hidden md:block font-medium\">{user?.fullName || \"المستخدم\"}</span>\n                  <i className=\"bi bi-chevron-down text-sm\"></i>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuItem data-testid=\"menu-profile\">\n                  <i className=\"bi bi-person w-4 h-4 ml-2\"></i>\n                  الملف الشخصي\n                </DropdownMenuItem>\n                <DropdownMenuItem data-testid=\"menu-settings\">\n                  <i className=\"bi bi-gear w-4 h-4 ml-2\"></i>\n                  الإعدادات\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={logout} className=\"text-destructive\" data-testid=\"menu-logout\">\n                  <i className=\"bi bi-box-arrow-left w-4 h-4 ml-2\"></i>\n                  تسجيل الخروج\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3828},"client/src/components/layout/sidebar.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"../../lib/auth\";\nimport { canAccessPage } from \"../../lib/permissions\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst menuItems = [\n  { id: \"dashboard\", path: \"/dashboard\", icon: \"bi-speedometer2\", label: \"لوحة التحكم\" },\n  { id: \"users\", path: \"/dashboard/users\", icon: \"bi-people\", label: \"المستخدمين\" },\n  { id: \"roles\", path: \"/dashboard/roles\", icon: \"bi-shield-check\", label: \"الأدوار والصلاحيات\" },\n  { id: \"centers\", path: \"/dashboard/centers\", icon: \"bi-building\", label: \"مراكز الخدمة\" },\n  { id: \"warehouses\", path: \"/dashboard/warehouses\", icon: \"bi-shop\", label: \"المخازن\" },\n  { id: \"inventory\", path: \"/dashboard/inventory\", icon: \"bi-box-seam\", label: \"المخزون\" },\n  { id: \"customers\", path: \"/dashboard/customers\", icon: \"bi-person-badge\", label: \"العملاء\" },\n  { id: \"categories\", path: \"/dashboard/categories\", icon: \"bi-diagram-3\", label: \"الفئات والمنتجات\" },\n  { id: \"service-requests\", path: \"/dashboard/service-requests\", icon: \"bi-tools\", label: \"طلبات الصيانة\" },\n  { id: \"transfers\", path: \"/dashboard/transfers\", icon: \"bi-arrow-left-right\", label: \"تحويل قطع الغيار\" },\n  { id: \"reports\", path: \"/dashboard/reports\", icon: \"bi-graph-up\", label: \"التقارير\" },\n  { id: \"activities\", path: \"/dashboard/activities\", icon: \"bi-activity\", label: \"سجل الأنشطة\" },\n  { id: \"data-management\", path: \"/dashboard/data-management\", icon: \"bi-database\", label: \"إدارة البيانات\" },\n  { id: \"settings\", path: \"/dashboard/settings\", icon: \"bi-gear\", label: \"الإعدادات\" },\n];\n\nexport default function Sidebar({ isOpen, onClose }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n\n  const handleNavigation = (path: string) => {\n    setLocation(path);\n    onClose();\n  };\n\n  // Filter menu items based on user role\n  const allowedMenuItems = menuItems.filter(item => {\n    if (!user) return false;\n    return canAccessPage(user.role, item.id);\n  });\n\n  return (\n    <div className={`sidebar fixed right-0 top-16 h-[calc(100vh-4rem)] w-64 bg-card border-l border-border overflow-y-auto transition-transform duration-300 ease-in-out lg:translate-x-0 z-30 ${isOpen ? 'open' : ''}`}>\n      <div className=\"p-4\">\n        <nav className=\"space-y-2\">\n          {allowedMenuItems.map((item) => (\n            <Button\n              key={item.id}\n              variant=\"ghost\"\n              className={`sidebar-link w-full justify-start text-right ${location === item.path ? 'active' : ''}`}\n              onClick={() => handleNavigation(item.path)}\n              data-testid={`nav-${item.id}`}\n            >\n              <i className={`bi ${item.icon} w-5 h-5 ml-3`}></i>\n              <span>{item.label}</span>\n            </Button>\n          ))}\n        </nav>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3034},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/data-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download, Upload, FileJson, AlertCircle } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function DataManagement() {\n  const { toast } = useToast();\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [importResults, setImportResults] = useState<any>(null);\n\n  const exportDataMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/export\", {\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"فشل تصدير البيانات\");\n      }\n      \n      // Convert response to blob and download\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `sokany-backup-${new Date().toISOString().split('T')[0]}.json`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      toast({\n        title: \"نجح التصدير\",\n        description: \"تم تصدير البيانات بنجاح\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ في التصدير\",\n        description: error.message || \"حدث خطأ أثناء تصدير البيانات\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const importDataMutation = useMutation({\n    mutationFn: async (fileData: any) => {\n      const response = await fetch(\"/api/import\", {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(fileData)\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"فشل استيراد البيانات\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setImportResults(data.imported);\n      toast({\n        title: \"نجح الاستيراد\",\n        description: \"تم استيراد البيانات بنجاح\"\n      });\n      // Invalidate all queries to refresh data\n      queryClient.invalidateQueries();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"خطأ في الاستيراد\",\n        description: error.message || \"حدث خطأ أثناء استيراد البيانات\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'application/json') {\n        toast({\n          title: \"نوع ملف غير صحيح\",\n          description: \"يجب أن يكون الملف بصيغة JSON\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n      setImportFile(file);\n    }\n  };\n\n  const handleImport = async () => {\n    if (!importFile) {\n      toast({\n        title: \"لم يتم اختيار ملف\",\n        description: \"الرجاء اختيار ملف للاستيراد\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const fileContent = await importFile.text();\n      const data = JSON.parse(fileContent);\n      importDataMutation.mutate(data);\n    } catch (error) {\n      toast({\n        title: \"خطأ في قراءة الملف\",\n        description: \"تأكد من أن الملف صحيح وبصيغة JSON\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\" dir=\"rtl\">\n      <h1 className=\"text-3xl font-bold mb-6\">إدارة البيانات</h1>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Export Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Download className=\"h-5 w-5\" />\n              تصدير البيانات\n            </CardTitle>\n            <CardDescription>\n              قم بتصدير جميع بيانات النظام كملف JSON للنسخ الاحتياطي\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Alert className=\"mb-4\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>معلومة مهمة</AlertTitle>\n              <AlertDescription>\n                سيتم تصدير جميع البيانات بما في ذلك المستخدمين، مراكز الخدمة، العملاء، الفئات، المنتجات، المخازن، وطلبات الصيانة.\n              </AlertDescription>\n            </Alert>\n            <Button \n              onClick={() => exportDataMutation.mutate()}\n              disabled={exportDataMutation.isPending}\n              className=\"w-full\"\n            >\n              <Download className=\"h-4 w-4 ml-2\" />\n              {exportDataMutation.isPending ? \"جاري التصدير...\" : \"تصدير جميع البيانات\"}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Import Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Upload className=\"h-5 w-5\" />\n              استيراد البيانات\n            </CardTitle>\n            <CardDescription>\n              قم باستيراد البيانات من ملف JSON سابق\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Alert className=\"mb-4 border-yellow-200 bg-yellow-50\">\n              <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n              <AlertTitle className=\"text-yellow-800\">تحذير</AlertTitle>\n              <AlertDescription className=\"text-yellow-700\">\n                استيراد البيانات قد يؤدي إلى تكرار البيانات الموجودة. تأكد من أخذ نسخة احتياطية قبل الاستيراد.\n              </AlertDescription>\n            </Alert>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Input\n                  type=\"file\"\n                  accept=\".json,application/json\"\n                  onChange={handleFileSelect}\n                  className=\"cursor-pointer\"\n                />\n                {importFile && (\n                  <p className=\"text-sm text-gray-600 mt-2\">\n                    الملف المحدد: {importFile.name}\n                  </p>\n                )}\n              </div>\n              \n              <Button \n                onClick={handleImport}\n                disabled={!importFile || importDataMutation.isPending}\n                className=\"w-full\"\n              >\n                <Upload className=\"h-4 w-4 ml-2\" />\n                {importDataMutation.isPending ? \"جاري الاستيراد...\" : \"استيراد البيانات\"}\n              </Button>\n            </div>\n\n            {importResults && (\n              <Card className=\"mt-4 bg-green-50 border-green-200\">\n                <CardHeader>\n                  <CardTitle className=\"text-green-800 text-lg\">نتائج الاستيراد</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-1 text-sm text-green-700\">\n                    <li>المستخدمين: {importResults.users || 0}</li>\n                    <li>مراكز الخدمة: {importResults.serviceCenters || 0}</li>\n                    <li>العملاء: {importResults.customers || 0}</li>\n                    <li>الفئات: {importResults.categories || 0}</li>\n                    <li>المنتجات: {importResults.products || 0}</li>\n                    <li>المخازن: {importResults.warehouses || 0}</li>\n                    <li>طلبات الصيانة: {importResults.serviceRequests || 0}</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Instructions */}\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileJson className=\"h-5 w-5\" />\n            تعليمات الاستخدام\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">للتصدير:</h3>\n              <ol className=\"list-decimal list-inside space-y-1 text-sm text-gray-600\">\n                <li>اضغط على زر \"تصدير جميع البيانات\"</li>\n                <li>سيتم تحميل ملف JSON يحتوي على جميع البيانات</li>\n                <li>احتفظ بهذا الملف في مكان آمن كنسخة احتياطية</li>\n              </ol>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">للاستيراد:</h3>\n              <ol className=\"list-decimal list-inside space-y-1 text-sm text-gray-600\">\n                <li>اختر ملف JSON الذي تم تصديره سابقاً</li>\n                <li>اضغط على زر \"استيراد البيانات\"</li>\n                <li>انتظر حتى تكتمل عملية الاستيراد</li>\n                <li>ستظهر نتائج الاستيراد بعد الانتهاء</li>\n              </ol>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10038},"client/src/pages/inventory.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiGet, apiPost, apiPut, apiDelete } from \"../lib/db\";\nimport type { ProductInventory, InsertProductInventory, Product, Warehouse } from \"@shared/schema\";\nimport { Package, Plus, Edit, Trash2, AlertCircle } from \"lucide-react\";\n\nexport default function Inventory() {\n  const [selectedWarehouse, setSelectedWarehouse] = useState<string>(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingInventory, setEditingInventory] = useState<ProductInventory | null>(null);\n  const [formData, setFormData] = useState<Partial<InsertProductInventory>>({\n    quantity: 0,\n    minQuantity: 5\n  });\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: warehouses, isLoading: warehousesLoading } = useQuery({\n    queryKey: ['/api/warehouses'],\n    queryFn: () => apiGet('/api/warehouses'),\n  });\n\n  const { data: products } = useQuery({\n    queryKey: ['/api/products'],\n    queryFn: () => apiGet('/api/products'),\n  });\n\n  const { data: inventory, isLoading: inventoryLoading } = useQuery({\n    queryKey: ['/api/product-inventory', selectedWarehouse],\n    queryFn: () => selectedWarehouse ? apiGet(`/api/product-inventory/${selectedWarehouse}`) : Promise.resolve([]),\n    enabled: !!selectedWarehouse,\n  });\n\n  // Set first warehouse as default when warehouses load\n  useEffect(() => {\n    if (warehouses && warehouses.length > 0 && !selectedWarehouse) {\n      setSelectedWarehouse(warehouses[0].id);\n    }\n  }, [warehouses, selectedWarehouse]);\n\n  const createInventoryMutation = useMutation({\n    mutationFn: (data: InsertProductInventory) => apiPost('/api/product-inventory', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/product-inventory', selectedWarehouse] });\n      setIsAddDialogOpen(false);\n      setFormData({ quantity: 0, minQuantity: 5 });\n      toast({ title: \"تم إضافة المخزون بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في إضافة المخزون\" });\n    },\n  });\n\n  const updateInventoryMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertProductInventory> }) => \n      apiPut(`/api/product-inventory/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/product-inventory', selectedWarehouse] });\n      setEditingInventory(null);\n      setFormData({ quantity: 0, minQuantity: 5 });\n      toast({ title: \"تم تحديث المخزون بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في تحديث المخزون\" });\n    },\n  });\n\n  const deleteInventoryMutation = useMutation({\n    mutationFn: (id: string) => apiDelete(`/api/product-inventory/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/product-inventory', selectedWarehouse] });\n      toast({ title: \"تم حذف المخزون بنجاح\" });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"فشل في حذف المخزون\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingInventory) {\n      updateInventoryMutation.mutate({ id: editingInventory.id, data: formData });\n    } else {\n      createInventoryMutation.mutate({\n        ...formData,\n        warehouseId: selectedWarehouse,\n      } as InsertProductInventory);\n    }\n  };\n\n  const handleEdit = (item: ProductInventory) => {\n    setEditingInventory(item);\n    setFormData({\n      productId: item.productId,\n      quantity: item.quantity,\n      minQuantity: item.minQuantity,\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"هل أنت متأكد من حذف هذا المخزون؟\")) {\n      deleteInventoryMutation.mutate(id);\n    }\n  };\n\n  const getProductName = (productId: string) => {\n    const product = products?.find((p: Product) => p.id === productId);\n    return product?.name || \"منتج غير معروف\";\n  };\n\n  const getWarehouseName = (warehouseId: string) => {\n    const warehouse = warehouses?.find((w: Warehouse) => w.id === warehouseId);\n    return warehouse?.name || \"مخزن غير معروف\";\n  };\n\n  if (warehousesLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">جاري التحميل...</div>\n      </div>\n    );\n  }\n\n  if (!warehouses || warehouses.length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-64 space-y-4\">\n        <AlertCircle className=\"h-12 w-12 text-muted-foreground\" />\n        <p className=\"text-muted-foreground\">لا توجد مخازن متاحة</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground mb-2\">إدارة المخزون</h1>\n            <p className=\"text-muted-foreground\">متابعة وإدارة مخزون المنتجات في المخازن</p>\n          </div>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button \n                className=\"flex items-center space-x-2 space-x-reverse\"\n                onClick={() => {\n                  setEditingInventory(null);\n                  setFormData({ quantity: 0, minQuantity: 5 });\n                }}\n              >\n                <Plus className=\"h-5 w-5\" />\n                <span>إضافة مخزون</span>\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-[500px]\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingInventory ? \"تعديل المخزون\" : \"إضافة مخزون جديد\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"product\">المنتج</Label>\n                  <Select\n                    value={formData.productId}\n                    onValueChange={(value) => setFormData({ ...formData, productId: value })}\n                    required\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"اختر المنتج\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {products?.map((product: Product) => (\n                        <SelectItem key={product.id} value={product.id}>\n                          {product.name} {product.model && `(${product.model})`}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"quantity\">الكمية المتوفرة</Label>\n                  <Input\n                    id=\"quantity\"\n                    type=\"number\"\n                    value={formData.quantity}\n                    onChange={(e) => setFormData({ ...formData, quantity: parseInt(e.target.value) || 0 })}\n                    required\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"minQuantity\">الحد الأدنى للكمية</Label>\n                  <Input\n                    id=\"minQuantity\"\n                    type=\"number\"\n                    value={formData.minQuantity || 0}\n                    onChange={(e) => setFormData({ ...formData, minQuantity: parseInt(e.target.value) || 0 })}\n                    required\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-2 space-x-reverse\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsAddDialogOpen(false)}>\n                    إلغاء\n                  </Button>\n                  <Button type=\"submit\">\n                    {editingInventory ? \"تحديث\" : \"إضافة\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Warehouse selector */}\n        <div className=\"mb-6\">\n          <Label htmlFor=\"warehouse\">اختر المخزن</Label>\n          <Select value={selectedWarehouse} onValueChange={setSelectedWarehouse}>\n            <SelectTrigger className=\"w-full md:w-1/3\">\n              <SelectValue placeholder=\"اختر المخزن\" />\n            </SelectTrigger>\n            <SelectContent>\n              {warehouses?.map((warehouse: Warehouse) => (\n                <SelectItem key={warehouse.id} value={warehouse.id}>\n                  {warehouse.name} - {warehouse.location}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {inventoryLoading ? (\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-muted-foreground\">جاري تحميل المخزون...</div>\n        </div>\n      ) : (\n        <div className=\"grid gap-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5\" />\n                مخزون {getWarehouseName(selectedWarehouse)}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!inventory || inventory.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  لا يوجد مخزون في هذا المخزن\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-right pb-3\">المنتج</th>\n                        <th className=\"text-right pb-3\">الكمية المتوفرة</th>\n                        <th className=\"text-right pb-3\">الحد الأدنى</th>\n                        <th className=\"text-right pb-3\">الحالة</th>\n                        <th className=\"text-right pb-3\">آخر تحديث</th>\n                        <th className=\"text-right pb-3\">الإجراءات</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {inventory.map((item: ProductInventory) => {\n                        const isLowStock = item.quantity <= (item.minQuantity || 0);\n                        const isOutOfStock = item.quantity === 0;\n                        return (\n                          <tr key={item.id} className=\"border-b\">\n                            <td className=\"py-3\">{getProductName(item.productId)}</td>\n                            <td className=\"py-3\">{item.quantity}</td>\n                            <td className=\"py-3\">{item.minQuantity}</td>\n                            <td className=\"py-3\">\n                              {isOutOfStock ? (\n                                <Badge variant=\"destructive\">نفذ المخزون</Badge>\n                              ) : isLowStock ? (\n                                <Badge variant=\"outline\" className=\"text-orange-600 border-orange-600\">\n                                  مخزون منخفض\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                                  متوفر\n                                </Badge>\n                              )}\n                            </td>\n                            <td className=\"py-3\">\n                              {new Date(item.updatedAt!).toLocaleDateString('ar-SA')}\n                            </td>\n                            <td className=\"py-3\">\n                              <div className=\"flex items-center gap-2\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => handleEdit(item)}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => handleDelete(item.id)}\n                                >\n                                  <Trash2 className=\"h-4 w-4 text-red-500\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":13711},"client/src/components/ui/status-progress.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { CheckCircle2, Circle, Clock, XCircle, AlertCircle, Package } from \"lucide-react\";\n\ntype ServiceStatus = 'pending' | 'in_progress' | 'completed' | 'cancelled';\n\ninterface StatusProgressProps {\n  status: ServiceStatus;\n  className?: string;\n  showLabel?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n  animate?: boolean;\n}\n\nconst statusConfig = {\n  pending: {\n    label: 'في الانتظار',\n    icon: Clock,\n    color: 'text-orange-500',\n    bgColor: 'bg-orange-100',\n    borderColor: 'border-orange-300',\n    progressColor: 'bg-orange-500',\n    step: 1,\n  },\n  in_progress: {\n    label: 'قيد التنفيذ',\n    icon: AlertCircle,\n    color: 'text-blue-500',\n    bgColor: 'bg-blue-100',\n    borderColor: 'border-blue-300',\n    progressColor: 'bg-blue-500',\n    step: 2,\n  },\n  completed: {\n    label: 'مكتمل',\n    icon: CheckCircle2,\n    color: 'text-green-500',\n    bgColor: 'bg-green-100',\n    borderColor: 'border-green-300',\n    progressColor: 'bg-green-500',\n    step: 3,\n  },\n  cancelled: {\n    label: 'ملغي',\n    icon: XCircle,\n    color: 'text-red-500',\n    bgColor: 'bg-red-100',\n    borderColor: 'border-red-300',\n    progressColor: 'bg-red-500',\n    step: 0,\n  },\n};\n\nconst steps = [\n  { key: 'pending', label: 'استلام الطلب', icon: Package },\n  { key: 'in_progress', label: 'قيد الإصلاح', icon: AlertCircle },\n  { key: 'completed', label: 'جاهز للتسليم', icon: CheckCircle2 },\n];\n\nexport function StatusProgress({ \n  status, \n  className, \n  showLabel = true, \n  size = 'md',\n  animate = true \n}: StatusProgressProps) {\n  const [mounted, setMounted] = useState(false);\n  const config = statusConfig[status];\n  const currentStep = config.step;\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const sizeClasses = {\n    sm: {\n      container: 'h-2',\n      icon: 'w-6 h-6',\n      text: 'text-xs',\n      padding: 'p-1',\n      gap: 'gap-2',\n    },\n    md: {\n      container: 'h-3',\n      icon: 'w-8 h-8',\n      text: 'text-sm',\n      padding: 'p-1.5',\n      gap: 'gap-3',\n    },\n    lg: {\n      container: 'h-4',\n      icon: 'w-10 h-10',\n      text: 'text-base',\n      padding: 'p-2',\n      gap: 'gap-4',\n    },\n  };\n\n  const sizes = sizeClasses[size];\n\n  if (status === 'cancelled') {\n    const Icon = config.icon;\n    return (\n      <div className={cn(\"flex items-center gap-2\", className)}>\n        <div className={cn(\n          \"rounded-full flex items-center justify-center transition-all duration-500\",\n          sizes.padding,\n          config.bgColor,\n          animate && mounted && \"animate-pulse\"\n        )}>\n          <Icon className={cn(sizes.icon, config.color)} />\n        </div>\n        {showLabel && (\n          <span className={cn(sizes.text, \"font-medium\", config.color)}>\n            {config.label}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-3\", className)}>\n      {/* Progress Steps */}\n      <div className={cn(\"flex items-center justify-between\", sizes.gap)}>\n        {steps.map((step, index) => {\n          const StepIcon = step.icon;\n          const stepNumber = index + 1;\n          const isActive = stepNumber === currentStep;\n          const isCompleted = stepNumber < currentStep;\n          const isPending = stepNumber > currentStep;\n\n          return (\n            <div key={step.key} className=\"flex flex-col items-center flex-1\">\n              {/* Step Circle */}\n              <div className=\"relative\">\n                <div className={cn(\n                  \"rounded-full flex items-center justify-center transition-all duration-700 transform\",\n                  sizes.padding,\n                  isCompleted && \"bg-green-100 scale-100\",\n                  isActive && cn(config.bgColor, animate && mounted && \"scale-110 animate-pulse\"),\n                  isPending && \"bg-gray-100 scale-90\",\n                  mounted && \"transition-transform\"\n                )}>\n                  <StepIcon className={cn(\n                    sizes.icon,\n                    \"transition-all duration-500\",\n                    isCompleted && \"text-green-500\",\n                    isActive && config.color,\n                    isPending && \"text-gray-400\",\n                    mounted && isActive && animate && \"animate-bounce\"\n                  )} />\n                </div>\n                \n                {/* Animated Ring for Active Step */}\n                {isActive && animate && (\n                  <div className={cn(\n                    \"absolute inset-0 rounded-full border-2 animate-ping\",\n                    config.borderColor,\n                    \"opacity-75\"\n                  )} />\n                )}\n              </div>\n\n              {/* Step Label */}\n              {showLabel && (\n                <span className={cn(\n                  sizes.text,\n                  \"mt-2 font-medium text-center transition-colors duration-500\",\n                  isCompleted && \"text-green-600\",\n                  isActive && config.color,\n                  isPending && \"text-gray-400\"\n                )}>\n                  {step.label}\n                </span>\n              )}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"relative px-8\">\n        <div className={cn(\n          \"w-full rounded-full overflow-hidden\",\n          sizes.container,\n          \"bg-gray-200\"\n        )}>\n          <div \n            className={cn(\n              \"h-full rounded-full transition-all duration-1000 ease-out\",\n              config.progressColor,\n              mounted && animate && \"animate-pulse\"\n            )}\n            style={{\n              width: mounted ? `${(currentStep / 3) * 100}%` : '0%',\n              transition: mounted ? 'width 1s ease-out' : 'none'\n            }}\n          />\n        </div>\n        \n        {/* Progress Percentage */}\n        {showLabel && (\n          <div className={cn(\n            \"absolute -top-8 transition-all duration-1000\",\n            sizes.text,\n            config.color\n          )}\n          style={{\n            left: mounted ? `${(currentStep / 3) * 100}%` : '0%',\n            transform: 'translateX(-50%)'\n          }}>\n            <span className=\"font-bold\">\n              {Math.round((currentStep / 3) * 100)}%\n            </span>\n          </div>\n        )}\n      </div>\n\n      {/* Current Status Label */}\n      {showLabel && (\n        <div className={cn(\n          \"text-center font-medium transition-colors duration-500\",\n          sizes.text,\n          config.color\n        )}>\n          الحالة الحالية: {config.label}\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Compact version for tables\nexport function StatusBadge({ status, animate = false }: { status: ServiceStatus; animate?: boolean }) {\n  const config = statusConfig[status];\n  const Icon = config.icon;\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return (\n    <div className={cn(\n      \"inline-flex items-center gap-1.5 px-2.5 py-1 rounded-full text-xs font-medium transition-all duration-500\",\n      config.bgColor,\n      config.color,\n      animate && mounted && status === 'in_progress' && \"animate-pulse\"\n    )}>\n      <Icon className={cn(\n        \"w-3.5 h-3.5\",\n        animate && mounted && status === 'in_progress' && \"animate-spin\"\n      )} />\n      <span>{config.label}</span>\n    </div>\n  );\n}","size_bytes":7467}},"version":1}